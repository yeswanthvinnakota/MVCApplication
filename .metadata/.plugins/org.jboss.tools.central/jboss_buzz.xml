<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Red Hat Summit 2018: Speakers on the forefront of Cloud-Native application development</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/JcdJxL4R_U0/" /><category term="cloud native development" scheme="searchisko:content:tags" /><category term="Developer Events" scheme="searchisko:content:tags" /><category term="events" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="red hat" scheme="searchisko:content:tags" /><category term="red hat summit" scheme="searchisko:content:tags" /><category term="Red Hat Summit 2018" scheme="searchisko:content:tags" /><author><name>Mike Guerette</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_summit_2018_speakers_on_the_forefront_of_cloud_native_application_development</id><updated>2018-04-13T16:00:02Z</updated><published>2018-04-13T16:00:02Z</published><content type="html">&lt;p&gt;May 8th &amp;#8211; 10th at &lt;strong&gt;&lt;a href="https://www.redhat.com/en/summit/2018"&gt;Red Hat Summit 2018&lt;/a&gt;&lt;/strong&gt; in San Francisco, you&amp;#8217;ll get to see, hear, and meet speakers who are working on the forefront of cloud-native application development. Some are core developers working on Red Hat products or in the upstream open source communities. A number of speakers have published books on topics such as microservices and integration.  Others are working directly with developers at Red Hat customer sites helping those organizations efficiently move to cloud-native application development.   The speakers include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366224"&gt;Clement Escoffier&lt;/a&gt;, Principal Software Engineer, &lt;a href="https://vertx.io/"&gt;Vert.x&lt;/a&gt; Core Developer&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366422"&gt;Claus Ibsen&lt;/a&gt;, Senior Principal Software Engineer, &lt;a href="http://www.davsclaus.com/2018/03/10-years-as-apache-camel-committer.html"&gt;Apache Camel project lead&lt;/a&gt;, Author of&lt;em&gt; &lt;a href="https://developers.redhat.com/books/selections-camel-action/"&gt;Camel in Action&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=364919"&gt;Jennifer Krieger&lt;/a&gt;, Chief Agile Architect&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=365987"&gt;Mark Little&lt;/a&gt;, VP of Engineering&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366167"&gt;Scott McCarty&lt;/a&gt;,  Senior Strategist, Containers&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366958"&gt;Brad Micklea&lt;/a&gt;, Director of Product Management, Developer Tools, &lt;a href="https://www.eclipse.org/che/"&gt;Eclipse Che&lt;/a&gt; project lead&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366130"&gt;John Osborne&lt;/a&gt;, Lead OpenShift Architect, Red Hat Federal&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=365640"&gt;Christian Posta&lt;/a&gt;, Chief Architect Cloud Application Development, Author of &lt;em&gt;&lt;a href="https://developers.redhat.com/books/microservices-java-developers-hands-introduction-frameworks-and-containers/"&gt;Microservices for Java Developers &lt;/a&gt;&lt;/em&gt; and Co-Author of &lt;a href="https://developers.redhat.com/books/introducing-istio-service-mesh-microservices"&gt;&lt;em&gt;Introducing Istio Service Mesh for Microservices&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366189"&gt;Steven Pousty&lt;/a&gt;, Director of Developer Advocacy&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366942"&gt;Burr Sutter&lt;/a&gt;, Director of Developer Experience, Co-Author of &lt;a href="https://developers.redhat.com/books/introducing-istio-service-mesh-microservices"&gt;&lt;em&gt;Introducing Istio Service Mesh for Microservices&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366649"&gt;Stian Thorgersen&lt;/a&gt;, Principal Software Engineer, &lt;a href="https://www.keycloak.org/"&gt;Keycloak&lt;/a&gt; Community Project Lead&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.redhat.com/en/about/company/management/chris-wright"&gt;Chris Wright&lt;/a&gt;, Chief Technology Officer&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/speakerDetail.aspx?id=365843"&gt;Edson Yanaga&lt;/a&gt;, Director of Developer Experience, Author of &lt;em&gt;&lt;a href="https://developers.redhat.com/books/migrating-microservice-databases-relational-monolith-distributed-data/"&gt;Migrating to Microservice Databases&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Join us at Red Hat Summit 2018&lt;/strong&gt;, to hear speakers from Red Hat, AquaSec, Bell Canada, Black Duck, Capital One, Cloudera, Deutsche Bank, F5, Facebook, Google, Microsoft, MITRE Corp., nearForm, Pixar, Sonatype, Twistlock, and many others.&lt;/p&gt; &lt;h2&gt;Speaker Highlights:&lt;/h2&gt; &lt;p&gt;&lt;span id="more-484927"&gt;&lt;/span&gt;&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;strong&gt;&lt;a href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=365640"&gt;Christian Posta&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;Christian Posta (&lt;a href="https://twitter.com/christianposta"&gt;@christianposta&lt;/a&gt;) is a Chief Architect &amp;#8211; cloud application development,  at Red Hat with 15+ years of experience building and designing highly scalable, resilient, distributed systems. He is the author of the O&amp;#8217;Reilly ebook &lt;em&gt;&lt;a href="https://developers.redhat.com/books/microservices-java-developers-hands-introduction-frameworks-and-containers/"&gt;Microservices for Java Developers: A Hands-on Introduction to Frameworks and Containers.&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Christian&amp;#8217;s sessions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154961"&gt;Istio: Solving challenges of hybrid cloud&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154710"&gt;Low-risk mono to microservices: Istio, Teiid, and Spring Boot&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154409"&gt;An eventful tour from enterprise integration to serverless computing&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=153508"&gt;What&amp;#8217;s a service mesh?&lt;/a&gt; (panel discussion)&lt;/li&gt; &lt;/ul&gt; &lt;hr /&gt; &lt;h3&gt;&lt;strong&gt;&lt;a href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366958"&gt;Brad Micklea&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;Brad Micklea is the director of product management for the developer tools group at Red Hat and project lead for &lt;a href="https://www.eclipse.org/che/"&gt;Eclipse Che&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;He is focused on building software portfolios that enable developers to build better software more quickly and easily. He came to Red Hat through the Codenvy acquisition where he ran all customer-facing aspects of the business.&lt;/p&gt; &lt;p&gt;Brad&amp;#8217;s sessions:&lt;/p&gt; &lt;ul class="pad-0 list-style-none"&gt; &lt;li&gt;&lt;a class="lx-speaking-at-side-item lx-track-color-0" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=163807"&gt;Future and roadmap for developer tools&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class="lx-speaking-at-side-item lx-track-color-0" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=163809"&gt;Introducing OpenShift.io—end-to-end cloud-native development made easy&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class="lx-speaking-at-side-item lx-track-color-0" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=163810"&gt;The future of OpenShift.io&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class="lx-speaking-at-side-item lx-track-color-0" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154525"&gt;Eclipse Che for developer teams on Red Hat OpenShift&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class="lx-speaking-at-side-item lx-track-color-0" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=162577"&gt;10 trends reshaping the developer experience&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;strong&gt;&lt;a href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366942"&gt;Burr Sutter&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;Burr Sutter (&lt;a href="https://twitter.com/burrsutter"&gt;@burrsutter&lt;/a&gt;) is Director, Developer Experience at Red Hat.  He is a lifelong developer advocate, community organizer, and technology evangelist, Burr Sutter is a featured speaker at technology events around the globe—from Bangalore to Brussels and Berlin to Beijing (and most parts in between)—he is currently Red Hat’s Director of Developer Experience. A Java Champion since 2005 and former president of the Atlanta Java User Group, Burr founded the DevNexus conference—now the second largest Java event in the U.S.—with the aim of making access to the world’s leading developers affordable to the developer community. When not speaking abroad, Burr is also the passionate creator and orchestrator of highly-interactive live demo keynotes at Red Hat Summit, the company’s premier annual event.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=163813"&gt;Containers, microservices, serverless: On being serverless or serverful&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154775"&gt;A Java developer&amp;#8217;s journey to Kubernetes and Openshift&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=153542"&gt;Hands on with Istio on OpenShift&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=162577"&gt;10 trends reshaping the developer experience&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;strong&gt;&lt;a href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366422"&gt;Claus Ibsen&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;Claus Ibsen (&lt;a href="https://twitter.com/davsclaus"&gt;@davsclaus&lt;/a&gt;) is a senior principal software engineer at Red Hat, working primarily as project lead on Apache Camel. Claus has been a full time developer on Apache Camel for the past 9 years. He is author of the &lt;em&gt;Camel in Action&lt;/em&gt; 1st and 2nd edition books.&lt;/p&gt; &lt;p&gt;Claus is very active in the open source communities, where he helps others, blogs, records videos, writes, and tweets as well. He is the author of &lt;a href="https://developers.redhat.com/books/selections-camel-action/"&gt;&lt;em&gt;Camel in Action&lt;/em&gt;.&lt;/a&gt;&lt;/p&gt; &lt;p class="q-speakers-sessions-label"&gt;This speaker&amp;#8217;s sessions:&lt;/p&gt; &lt;ul class="pad-0 list-style-none"&gt; &lt;li&gt;&lt;a class="lx-speaking-at-side-item lx-track-color-0" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154965"&gt;iPaaS hackathon: Build a cool integrated app&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class="lx-speaking-at-side-item lx-track-color-0" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154680"&gt;Creating APIs with Red Hat JBoss Fuse, Apache Camel REST DSL, and managing them with 3Scale by Red Hat&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class="lx-speaking-at-side-item lx-track-color-0" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154217"&gt;Java development with JBoss Fuse on OpenShift&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;strong&gt;&lt;a href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366189"&gt;Steven Pousty&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;Steven Pousty is a Dad, Son, Partner, and Director of Developer Advocacy Red Hat Middleware. He goes around and talks about cool technology that sometimes involves Red Hat Technology. He can teach you about Java, Python, PostgreSQL MongoDB, some JavaScript, Docker, and Kubernetes. He has deep subject area expertise in GIS/Spatial, Statistics, and Ecology. He has spoken at over 75 conferences and done over 50 workshops including Monktoberfest, MongoNY, JavaOne, FOSS4G, CiscoLive, Fluent, DevNation, Where2.0, and OSCON. Before OpenShift, Steve was a developer evangelist for LinkedIn, deCarta, and ESRI. Steve has a Ph.D. in Ecology. He likes building interesting applications and helping developers create great solutions. He can be bribed with offers of bird watching or fly fishing trips!&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a class="lx-session-title" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154124"&gt;Cloud-native smackdown V&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class="lx-speaking-at-side-item lx-track-color-0" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154367"&gt;Adding intelligence to event-processing apps&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class="lx-speaking-at-side-item lx-track-color-0" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154015"&gt;Holy Canoli. How am I supposed to test all this?&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;strong&gt;&lt;a href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=364919"&gt;Jennifer Krieger&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;Keynote speaker and doer of many things, Jen Krieger (&lt;a href="https://twitter.com/mrry550"&gt;@mrry550&lt;/a&gt;) is Chief Agile Architect at Red Hat. Most of her 20+ year career has been in software development holding many roles throughout the waterfall and agile lifecycles. At Red Hat, she leads a department-wide adoption of DevOps methodologies focusing on CI/CD best practices. Most recently, she worked with the Project Atomic &amp;#38; OpenShift teams, the company&amp;#8217;s two leading products, to help establish strong working relationships while the organization scaled rapidly. Now, Jen is guiding teams across the entire company into agility in a way that respects and supports Red Hat&amp;#8217;s commitment to open source.&lt;/p&gt; &lt;p&gt;Jen&amp;#8217;s sessions:&lt;/p&gt; &lt;ul class="pad-0 list-style-none"&gt; &lt;li&gt;&lt;a class="lx-speaking-at-side-item lx-track-color-0" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=163846"&gt;Past, present, and future of agile and DevOps&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class="lx-speaking-at-side-item lx-track-color-0" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=153951"&gt;Speak up: How the OpenShift team collaborated effectively across distance, time zones, and cultures&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class="lx-speaking-at-side-item lx-track-color-0" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154677"&gt;I&amp;#8217;m a developer. What do I need to know about security?&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;a href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366130"&gt;&lt;strong&gt;John Osborne&lt;/strong&gt;&lt;/a&gt;&lt;/h3&gt; &lt;p&gt;John Osborne is the Lead OpenShift Architect for Red Hat Federal. He has been at Red Hat for 4 years with a strong focus on Kubernetes and DevOps. Before his arrival at Red Hat, he worked at a start-up and then spent 7 years with the U.S. Navy developing high-performance technologies using JBoss Middleware and deploying them to several mission-critical areas across the globe. He has a strong background in all phases of the software development lifecycle. He currently holds his B.S. in Computer Science, M.B.A., and an M.S. in Software Engineering.&lt;/p&gt; &lt;p class="q-speakers-sessions-label"&gt;John&amp;#8217;s sessions:&lt;/p&gt; &lt;ul class="pad-0 list-style-none"&gt; &lt;li&gt;&lt;a class="lx-speaking-at-side-item lx-track-color-0" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154088"&gt;Developing .NET Core applications on Red Hat OpenShift&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class="lx-speaking-at-side-item lx-track-color-0" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154118"&gt;Linux container internals: Part 1&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class="lx-speaking-at-side-item lx-track-color-0" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154119"&gt;Linux container internals: Part 2&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;strong&gt;&lt;a href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366224"&gt;Clement Escoffier&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;Clement Escoffier (&lt;a href="https://twitter.com/clementplop"&gt;@clementplop&lt;/a&gt;) is a principal software engineer at Red Hat. He has had several professional lives, from academic positions to management. Currently, he is working as a Vert.x core developer. He has been involved in projects and products touching many domains and technologies such as OSGi, mobile app development, continuous delivery, and DevOps. Clement is an active contributor to many open source projects such as Apache Felix, iPOJO, Wisdom Framework and Eclipse Vert.x.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Reactive data pipelines on OpenShift with Eclipse Vert.x&lt;/li&gt; &lt;li&gt;&lt;a class="lx-speaking-at-side-item lx-track-color-1" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154549"&gt;Microservices data patterns: CQRS &amp;#38; event sourcing&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;strong&gt;&lt;a href="https://agenda.summit.redhat.com/speakerDetail.aspx?id=365688"&gt;James Falkner&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;James Falkner (&lt;a href="https://twitter.com/schtool"&gt;@schtool&lt;/a&gt;) is a Sr. technical product manager with Red Hat Middleware and is dedicated to open source and Red Hat&amp;#8217;s open computing philosophy. His career spans 20 years in the software industry taking on roles up and down the software stack, from firmware, operating systems, cloud infrastructure and most recently helping customers, partners and the open source community with application development focusing on Linux containers and modern app architectures.&lt;/p&gt; &lt;p class="q-speakers-sessions-label"&gt;James&amp;#8217; sessions&lt;/p&gt; &lt;ul class="pad-0 list-style-none"&gt; &lt;li&gt;&lt;a class="lx-speaking-at-side-item lx-track-color-0" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=153550"&gt;Getting started with cloud-native apps&lt;/a&gt;&lt;/li&gt; &lt;li id="MainContent_HubbSpeakerDetail_sessionListView_Li1_0"&gt;&lt;a class="lx-speaking-at-side-item lx-track-color-0" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=153542"&gt;Hands on with Istio on OpenShift&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;strong&gt;&lt;a href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366649"&gt;Stian Thorgersen&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;Stian Thorgersen is Principal Software Engineer, an engineering lead on Red Hat Single Sign-On and the community project lead on Keycloak. Prior to joining Red Hat, Stian was the lead developer at Arjuna Technologies working on Agility, a cloud federation platform.&lt;/p&gt; &lt;p class="q-speakers-sessions-label"&gt;Stian&amp;#8217;s sessions:&lt;/p&gt; &lt;ul class="pad-0 list-style-none"&gt; &lt;li&gt;&lt;a class="lx-speaking-at-side-item lx-track-color-0" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=163840"&gt;Securing service mesh, microservices, and modern applications with JSON Web Token (JWT)&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class="lx-speaking-at-side-item lx-track-color-0" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154463"&gt;Securing apps and services with Red Hat single sign-on&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;strong&gt;&lt;a href="https://agenda.summit.redhat.com/speakerDetail.aspx?id=365843"&gt;Edson Yanaga&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;Edson Yanaga (&lt;a href="https://twitter.com/yanaga"&gt;@yanaga&lt;/a&gt;), Red Hat&amp;#8217;s Director of Developer Experience, is a Java Champion and a Microsoft MVP. He is also a published author and a frequent speaker at international conferences, discussing Java, Microservices, Cloud Computing, DevOps, and Software Craftsmanship. Edson is the author of the O&amp;#8217;Reilly ebook &lt;em&gt;&lt;a href="https://developers.redhat.com/books/migrating-microservice-databases-relational-monolith-distributed-data/"&gt;Migrating to Microservice Databases: From Relational Monolith to Distributed Data&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;ul class="pad-0 list-style-none"&gt; &lt;li&gt;&lt;a class="lx-speaking-at-side-item lx-track-color-0" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=153676"&gt;The why behind DevOps, containers, and microservices&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a class="lx-speaking-at-side-item lx-track-color-0" href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154549"&gt;Microservices data patterns: CQRS &amp;#38; event sourcing&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h2&gt;Don’t miss Red Hat Summit 2018&lt;/h2&gt; &lt;p class="selectionShareable"&gt;&lt;a href="https://www.redhat.com/en/summit/2018"&gt;&lt;strong&gt;Red Hat Summit 2018&lt;/strong&gt;&lt;/a&gt; is May 8th – 10th in San Francisco, CA at the Moscone Center.  Register early to save on a full conference pass.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/"&gt;List of all sessions&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/Speakers.aspx"&gt;List of All Speakers&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/?Application%20development=2"&gt;All Application development sessions&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F13%2Fred-hat-summit-2018-speakers-cloud-native-app-dev%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Speakers%20on%20the%20forefront%20of%20Cloud-Native%20application%20development" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F13%2Fred-hat-summit-2018-speakers-cloud-native-app-dev%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Speakers%20on%20the%20forefront%20of%20Cloud-Native%20application%20development" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F13%2Fred-hat-summit-2018-speakers-cloud-native-app-dev%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Speakers%20on%20the%20forefront%20of%20Cloud-Native%20application%20development" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F13%2Fred-hat-summit-2018-speakers-cloud-native-app-dev%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Speakers%20on%20the%20forefront%20of%20Cloud-Native%20application%20development" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F13%2Fred-hat-summit-2018-speakers-cloud-native-app-dev%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Speakers%20on%20the%20forefront%20of%20Cloud-Native%20application%20development" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F13%2Fred-hat-summit-2018-speakers-cloud-native-app-dev%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Speakers%20on%20the%20forefront%20of%20Cloud-Native%20application%20development" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F13%2Fred-hat-summit-2018-speakers-cloud-native-app-dev%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Speakers%20on%20the%20forefront%20of%20Cloud-Native%20application%20development" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F13%2Fred-hat-summit-2018-speakers-cloud-native-app-dev%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Speakers%20on%20the%20forefront%20of%20Cloud-Native%20application%20development" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F13%2Fred-hat-summit-2018-speakers-cloud-native-app-dev%2F&amp;#38;title=Red%20Hat%20Summit%202018%3A%20Speakers%20on%20the%20forefront%20of%20Cloud-Native%20application%20development" data-a2a-url="https://developers.redhat.com/blog/2018/04/13/red-hat-summit-2018-speakers-cloud-native-app-dev/" data-a2a-title="Red Hat Summit 2018: Speakers on the forefront of Cloud-Native application development"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/13/red-hat-summit-2018-speakers-cloud-native-app-dev/"&gt;Red Hat Summit 2018: Speakers on the forefront of Cloud-Native application development&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/JcdJxL4R_U0" height="1" width="1" alt=""/&gt;</content><summary>May 8th – 10th at Red Hat Summit 2018 in San Francisco, you’ll get to see, hear, and meet speakers who are working on the forefront of cloud-native application development. Some are core developers working on Red Hat products or in the upstream open source communities. A number of speakers have published books on topics such as microservices and integration.  Others are working directly with devel...</summary><dc:creator>Mike Guerette</dc:creator><dc:date>2018-04-13T16:00:02Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/04/13/red-hat-summit-2018-speakers-cloud-native-app-dev/</feedburner:origLink></entry><entry><title>This week in JBoss (2018-04-13)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/OgAQP9A4WqQ/this-week-in-jboss-2018-04-13" /><category term="byteman" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="Hibernate" scheme="searchisko:content:tags" /><category term="istio" scheme="searchisko:content:tags" /><category term="red hat summit" scheme="searchisko:content:tags" /><category term="richfaces" scheme="searchisko:content:tags" /><category term="vertx" scheme="searchisko:content:tags" /><category term="wildfly" scheme="searchisko:content:tags" /><category term="wildfly swarm" scheme="searchisko:content:tags" /><author><name>unknown</name></author><id>searchisko:content:id:jbossorg_blog-this_week_in_jboss_2018_04_13</id><updated>2018-04-13T12:22:57Z</updated><published>2018-04-13T12:22:57Z</published><content type="html">&lt;!-- [DocumentBodyStart:f96365cf-0db5-4921-b3d8-30ceaeb3b100] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p style="text-align: center;"&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6180-194341/summit-logo.png"&gt;&lt;img alt="" class="image-1 jive-image" height="279" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6180-194341/summit-logo.png" style="height: auto;" width="592"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 14pt;"&gt;It's that time of year again and the Red Hat Summit conference in San Francisco is rapidly approaching. Expect to see a flurry of product and project releases, over the coming weeks, as the teams prepare to announce their latest and greatest offerings.&lt;/span&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 14pt;"&gt;If you're planning on attending Red Hat Summit, you can read &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2018/04/11/red-hat-summit-2018-getting-started-with-modern-application-development/" rel="nofollow"&gt;here&lt;/a&gt;, to get a preview of the sessions covering modern application development.&lt;/span&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p style="text-align: center;"&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6180-194342/combo-1024x570.png"&gt;&lt;img alt="" class="image-2 jive-image" height="570" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6180-194342/combo-1024x570.png" style="width: 620px; height: 345px;" width="1024"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 14pt;"&gt;In &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2018/04/12/bringing-coolstore-microservices-to-the-service-mesh-part-2-manual-injection/" rel="nofollow"&gt;the first part of this series&lt;/a&gt; James Falkner explores the Istio project and how Red Hat is actively involved, working to integrate it into Kubernetes and OpenShift. This integration brings the benefits of a service mesh to our customers and the wider communities involved.&lt;/span&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 14pt;"&gt;In &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2018/04/10/istio-chaos-engineering/" rel="nofollow"&gt;this post&lt;/a&gt; Don Schenck talks about testing for failures in your distributed application. Testing how your application responds to network unreliability is traditionally very hard to do. However, in this post Don shows how this can be done with ease by injecting faults into your application running in an Istio service mesh.&lt;/span&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 14pt;"&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6180-194343/eclipse-vertx-logo.png"&gt;&lt;img alt="" class="image-3 jive-image" height="127" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6180-194343/eclipse-vertx-logo.png" style="height: auto; display: block; margin-left: auto; margin-right: auto;" width="422"/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 14pt;"&gt;&lt;span style="font-size: 18.6667px;"&gt;In &lt;/span&gt;&lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2018/04/09/accessing-data-reactive-way/" rel="nofollow"&gt;the fourth post&lt;/a&gt;&lt;span style="font-size: 18.6667px;"&gt; of Clement Escoffier's &amp;ldquo;Introduction to Eclipse Vert.x.&amp;#8221; series, he shows how you can use JDBC in an Eclipse Vert.x application using the asynchronous API provided by the vertx-jdbc-client. But before diving into JDBC and other SQL subtleties, Clement provides a primer on Vert.x &lt;/span&gt;&lt;span style="font-size: 18.6667px;"&gt;&lt;em&gt;Futures&lt;/em&gt;&lt;/span&gt;&lt;span style="font-size: 18.6667px;"&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 18.6667px;"&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6180-194344/10-step-journey-10.png"&gt;&lt;img alt="" class="image-4 jive-image" height="719" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6180-194344/10-step-journey-10.png" style="width: 620px; height: 350px; display: block; margin-left: auto; margin-right: auto;" width="1272"/&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;&lt;table border="0px" class="jiveBorder mce-item-table" jive-data-cell="{&amp;quot;color&amp;quot;:&amp;quot;#3D3D3D&amp;quot;,&amp;quot;textAlign&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;padding&amp;quot;:&amp;quot;6&amp;quot;,&amp;quot;backgroundColor&amp;quot;:&amp;quot;transparent&amp;quot;,&amp;quot;fontFamily&amp;quot;:&amp;quot;Helvetica Neue,Helvetica,Arial,Lucida Grande,sans-serif&amp;quot;,&amp;quot;verticalAlign&amp;quot;:&amp;quot;baseline&amp;quot;}" jive-data-header="{&amp;quot;color&amp;quot;:&amp;quot;#505050&amp;quot;,&amp;quot;backgroundColor&amp;quot;:&amp;quot;#F2F2F2&amp;quot;,&amp;quot;textAlign&amp;quot;:&amp;quot;left&amp;quot;,&amp;quot;padding&amp;quot;:&amp;quot;6&amp;quot;}" style="border: 0px solid #c6c6c6; width: 100%;"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style="border:0pxpx solid black;border: 0px solid #c6c6c6;padding: 6px;"&gt;&lt;p&gt;&lt;span style="font-size: 14pt;"&gt;In a few weeks, on 24 April 2018, Eric Schabell will be visiting the Portland, Oregon Java User Group (known as PJUG). Here Eric will deliver a workshop where attendees will get started with containers, Cloud and some examples so that you have your own private PaaS Cloud on your laptop. You'll be given a private Cloud in minutes that turns your laptop into a container platform where you then can explore a multitude of example projects from such domains as retail, travel, finance and more. &lt;/span&gt;&lt;span style="font-size: 14pt;"&gt;You can read more and sign up for the event &lt;a class="jive-link-external-small" href="https://www.meetup.com/PDXJUG/events/249695216/" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/span&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 14pt;"&gt;You can also catch Eric at DevConf.us 2018. In &lt;a class="jive-link-external-small" href="http://planet.jboss.org/post/devconf_us_2018_process_driven_development_cloud_containers_and_more" rel="nofollow"&gt;this post&lt;/a&gt; Eric previews the talks and workshops he'll be giving. &lt;/span&gt;&lt;/p&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p style="text-align: center;"&gt;&lt;a href="https://developer.jboss.org/servlet/JiveServlet/showImage/38-6180-194345/Richfaces_logo.gif"&gt;&lt;img alt="" class="image-5 jive-image" height="200" src="https://developer.jboss.org/servlet/JiveServlet/downloadImage/38-6180-194345/Richfaces_logo.gif" style="height: auto;" width="600"/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;span style="font-size: 14pt;"&gt;In &lt;a class="jive-link-external-small" href="http://planet.jboss.org/post/a_small_update_on_richfaces" rel="nofollow"&gt;this post&lt;/a&gt; Michal Petrov gives a status update on the RichFaces community. Red Hat stopped contributing to the RichFaces codebase almost two years ago, however there are still many people using the technology. In &lt;a class="jive-link-external-small" href="http://planet.jboss.org/post/a_small_update_on_richfaces" rel="nofollow"&gt;this post&lt;/a&gt; Michal talks about what the RichFaces community are doing to continue to support those users.&lt;/span&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;&lt;span style="font-size: 14pt;"&gt;New Releases&lt;/span&gt;&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;span style="font-size: 14pt;"&gt;&lt;a class="jive-link-external-small" href="http://planet.jboss.org/post/hibernate_search_5_10_0_beta2_is_out" rel="nofollow"&gt;Hibernate Search 5.10.0.Beta2&lt;/a&gt;. This release mainly includes an upgrade to WildFly 12 for the JBoss modules, but it also adds a few bug-fixes and improvements&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-size: 14pt;"&gt;&lt;a class="jive-link-external-small" href="http://planet.jboss.org/post/announcing_wildfly_swarm_2018_4_1" rel="nofollow"&gt;WildFly Swarm 2018.4.1&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style="font-size: 14pt;"&gt;&lt;a class="jive-link-external-small" href="http://planet.jboss.org/post/byteman_4_0_2_has_been_released" rel="nofollow"&gt;Byteman 4.0.2&lt;/a&gt;. This is the latest release for use on JDK9+ runtimes. It is also recommended as the preferred release for use on JDK8- runtimes.&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:f96365cf-0db5-4921-b3d8-30ceaeb3b100] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/OgAQP9A4WqQ" height="1" width="1" alt=""/&gt;</content><summary>It's that time of year again and the Red Hat Summit conference in San Francisco is rapidly approaching. Expect to see a flurry of product and project releases, over the coming weeks, as the teams prepare to announce their latest and greatest offerings.   If you're planning on attending Red Hat Summit, you can read here, to get a preview of the sessions covering modern application development.     ...</summary><dc:creator>unknown</dc:creator><dc:date>2018-04-13T12:22:57Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/weekly-editorial/2018/04/13/this-week-in-jboss-2018-04-13</feedburner:origLink></entry><entry><title>Deallocate an Azure VM Using the Azure CLI on RHEL</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/mVtxCChxml0/" /><category term="azure" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="cloud computing" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><author><name>Takayoshi Tanaka</name></author><id>searchisko:content:id:jbossorg_blog-deallocate_an_azure_vm_using_the_azure_cli_on_rhel</id><updated>2018-04-13T10:55:07Z</updated><published>2018-04-13T10:55:07Z</published><content type="html">&lt;p&gt;If you&amp;#8217;re running Red Hat Enterprise Linux server on Microsoft Azure, you may want to shut down and deallocate the VM using commands inside of the VM itself for automation or just for convenience. On Azure, if you shut down the VM by using &lt;code&gt;shutdown -h&lt;/code&gt; or another OS command, it will stop but not deallocate it.  The stopped VM is still using resources and will continue to incur compute charges. To avoid that, this article shows how a VM can shut itself down and deallocate its resources using the Azure CLI 2.0.&lt;br /&gt; &lt;span id="more-483277"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;Install Azure CLI 2.0&lt;/h3&gt; &lt;p&gt;Since Azure CLI 2.0 is required, please &lt;a href="https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-yum?view=azure-cli-latest"&gt;install it&lt;/a&gt; as follows.&lt;/p&gt; &lt;pre class="brush: bash; title: ; notranslate"&gt; $ sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc $ sudo sh -c 'echo -e &amp;#34;[azure-cli]\nname=Azure CLI\nbaseurl=https://packages.microsoft.com/yumrepos/azure-cli\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc&amp;#34; &amp;#38;amp;amp;gt; /etc/yum.repos.d/azure-cli.repo' $ sudo yum install azure-cli &lt;/pre&gt; &lt;h3&gt;Enable Managed Service Identity (Optional)&lt;/h3&gt; &lt;p&gt;&lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/managed-service-identity/overview" target="_blank" rel="noopener"&gt;Managed Service Identity (MSI)&lt;/a&gt; is optional but recommended because it avoids storing the password within the VM. If you don&amp;#8217;t want to use MSI, please see the last section.&lt;/p&gt; &lt;p&gt;To enable MSI, you can use &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/managed-service-identity/qs-configure-cli-windows-vm#enable-msi-on-an-existing-azure-vm" target="_blank" rel="noopener"&gt;Azure CLI 2.0&lt;/a&gt;, &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/managed-service-identity/qs-configure-portal-windows-vm" target="_blank" rel="noopener"&gt;Azure Portal&lt;/a&gt;, or other administration tools.&lt;/p&gt; &lt;p&gt;I enabled MSI using Azure CLI 2.0.&lt;/p&gt; &lt;pre class="brush: bash; title: ; notranslate"&gt; $ az vm identity assign -g tatanaka-ocp-filetest -n tatanaka-ocp-filetest &lt;/pre&gt; &lt;p&gt;After enabling MSI, you have to &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/managed-service-identity/howto-assign-access-cli#use-rbac-to-assign-the-msi-access-to-another-resource" target="_blank" rel="noopener"&gt;assign the proper role to the MSI-enabled VM&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;I assigned the &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/role-based-access-built-in-roles#virtual-machine-contributor" target="_blank" rel="noopener"&gt;Virtual Machine Contributor&lt;/a&gt; role with the scope of the VM itself, so the VM has a privilege to manage only the VM itself. To accomplish this, use the first command below to show the resource ID of the VM. Use the second command below to show the service principal ID of the VM. Then use these values, respectively, in place of &lt;code&gt;&amp;#60;vm_resource_id&amp;#62;&lt;/code&gt; and &lt;code&gt;&amp;#60;sp_id&amp;#62;&lt;/code&gt; in the third command below.&lt;/p&gt; &lt;pre class="brush: bash; title: ; notranslate"&gt; $ az vm show -g &amp;#38;amp;lt;resource_group&amp;#38;amp;gt; -n &amp;#38;amp;lt;vm_name&amp;#38;amp;gt; --query id $ az resource list -n &amp;#38;amp;lt;vm_name&amp;#38;amp;gt; --query [*].identity.principalId --out tsv $ az role assignment create --assignee &amp;#38;amp;lt;vm_resource_id&amp;#38;amp;gt; --role 'Virtual Machine Contributor' --scope &amp;#38;amp;lt;sp_id&amp;#38;amp;gt; &lt;/pre&gt; &lt;h3&gt;Deallocate Script&lt;/h3&gt; &lt;p&gt;Now you can execute the &lt;a href="https://docs.microsoft.com/ja-jp/cli/azure/vm?view=azure-cli-latest#az-vm-deallocate"&gt;&lt;code&gt;az vm deallocate&lt;/code&gt;&lt;/a&gt; command within the VM as follows.&lt;/p&gt; &lt;pre class="brush: bash; title: ; notranslate"&gt; $ az login --msi $ az vm deallocate -g -n &lt;/pre&gt; &lt;p&gt;However, you have to specify resource group and name parameters in this command. To avoid that, let&amp;#8217;s use the &lt;a href="https://docs.microsoft.com/en-us/azure/virtual-machines/windows/instance-metadata-service" target="_blank" rel="noopener"&gt;Azure Instance Metadata service&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Here is the whole script to deallocate the VM.&lt;/p&gt; &lt;pre class="brush: bash; title: ; notranslate"&gt; #!/bin/bash response=$(curl -H Metadata:true &amp;#34;http://169.254.169.254/metadata/instance/compute?api-version=2017-12-01&amp;#34; -s) resource_group=$(echo $response | python -c 'import sys, json; print (json.load(sys.stdin)[&amp;#34;resourceGroupName&amp;#34;])') vm_name=$(echo $response | python -c 'import sys, json; print (json.load(sys.stdin)[&amp;#34;name&amp;#34;])') az login --msi az vm deallocate -g $resource_group -n $vm_name &lt;/pre&gt; &lt;p&gt;Now, a user who can log in to the VM can deallocate this VM even though the user doesn&amp;#8217;t have Azure access.&lt;/p&gt; &lt;h3&gt;Using Password Authentication&lt;/h3&gt; &lt;p&gt;If you don&amp;#8217;t use MSI, you have to log in with a password, which means you have to store a password in the VM for noninteractive deallocation. To avoid storing the password of the Microsoft account, I strongly recommend creating an &lt;a href="https://docs.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli?view=azure-cli-latest" target="_blank" rel="noopener"&gt;Azure service principal&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can create a service principal and assign a role as follows.&lt;/p&gt; &lt;pre class="brush: bash; title: ; notranslate"&gt; $ az ad sp create-for-rbac --name &amp;#38;amp;lt;sp-name&amp;#38;amp;gt; --password &amp;#38;amp;lt;password&amp;#38;amp;gt; $ az vm show -g &amp;#38;amp;lt;resource_group&amp;#38;amp;gt; -n &amp;#38;amp;lt;vm_name&amp;#38;amp;gt; --query id $ az role assignment create --assignee &amp;#38;amp;lt;created_sp_id&amp;#38;amp;gt; --role 'Virtual Machine Contributor' --scope &amp;#38;amp;lt;vm_resource_id&amp;#38;amp;gt; &lt;/pre&gt; &lt;p&gt;In the deallocate script, replace the &lt;code&gt;--msi&lt;/code&gt; option with the following:&lt;/p&gt; &lt;pre class="brush: bash; title: ; notranslate"&gt; az login --service-principal -u &amp;#38;amp;lt;created_sp_client_id&amp;#38;amp;gt; -p &amp;#38;amp;lt;password&amp;#38;amp;gt; --tenant &amp;#38;amp;lt;tenant_id&amp;#38;amp;gt; &lt;/pre&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F13%2Frhel-vm-deallocate-azure-cli%2F&amp;#38;linkname=Deallocate%20an%20Azure%20VM%20Using%20the%20Azure%20CLI%20on%20RHEL" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F13%2Frhel-vm-deallocate-azure-cli%2F&amp;#38;linkname=Deallocate%20an%20Azure%20VM%20Using%20the%20Azure%20CLI%20on%20RHEL" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F13%2Frhel-vm-deallocate-azure-cli%2F&amp;#38;linkname=Deallocate%20an%20Azure%20VM%20Using%20the%20Azure%20CLI%20on%20RHEL" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F13%2Frhel-vm-deallocate-azure-cli%2F&amp;#38;linkname=Deallocate%20an%20Azure%20VM%20Using%20the%20Azure%20CLI%20on%20RHEL" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F13%2Frhel-vm-deallocate-azure-cli%2F&amp;#38;linkname=Deallocate%20an%20Azure%20VM%20Using%20the%20Azure%20CLI%20on%20RHEL" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F13%2Frhel-vm-deallocate-azure-cli%2F&amp;#38;linkname=Deallocate%20an%20Azure%20VM%20Using%20the%20Azure%20CLI%20on%20RHEL" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F13%2Frhel-vm-deallocate-azure-cli%2F&amp;#38;linkname=Deallocate%20an%20Azure%20VM%20Using%20the%20Azure%20CLI%20on%20RHEL" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F13%2Frhel-vm-deallocate-azure-cli%2F&amp;#38;linkname=Deallocate%20an%20Azure%20VM%20Using%20the%20Azure%20CLI%20on%20RHEL" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F13%2Frhel-vm-deallocate-azure-cli%2F&amp;#38;title=Deallocate%20an%20Azure%20VM%20Using%20the%20Azure%20CLI%20on%20RHEL" data-a2a-url="https://developers.redhat.com/blog/2018/04/13/rhel-vm-deallocate-azure-cli/" data-a2a-title="Deallocate an Azure VM Using the Azure CLI on RHEL"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/13/rhel-vm-deallocate-azure-cli/"&gt;Deallocate an Azure VM Using the Azure CLI on RHEL&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/mVtxCChxml0" height="1" width="1" alt=""/&gt;</content><summary>If you’re running Red Hat Enterprise Linux server on Microsoft Azure, you may want to shut down and deallocate the VM using commands inside of the VM itself for automation or just for convenience. On Azure, if you shut down the VM by using shutdown -h or another OS command, it will stop but not deallocate it.  The stopped VM is still using resources and will continue to incur compute charges. To a...</summary><dc:creator>Takayoshi Tanaka</dc:creator><dc:date>2018-04-13T10:55:07Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/04/13/rhel-vm-deallocate-azure-cli/</feedburner:origLink></entry><entry><title>Portland Java User Group (PJUG) - 10 Steps to Cloud Happiness</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/9mHhERBu4N0/portland-java-user-group-10-steps-to-cloud-happiness.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="BPM Suite" scheme="searchisko:content:tags" /><category term="BRMS" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Cloud Suite" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="FUSE" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="JUG" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="workshops" scheme="searchisko:content:tags" /><category term="xpaas" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-portland_java_user_group_pjug_10_steps_to_cloud_happiness</id><updated>2018-04-13T05:00:43Z</updated><published>2018-04-13T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://3.bp.blogspot.com/-JWHQw1JYXMk/Wm5GgND3kgI/AAAAAAAArqE/ciyBwYIUJvIfSYGNt297Q7pBUoelvfBxwCPcBGAYYCw/s1600/10-step-journey-10.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="portland java user" border="0" data-original-height="719" data-original-width="1272" height="180" src="https://3.bp.blogspot.com/-JWHQw1JYXMk/Wm5GgND3kgI/AAAAAAAArqE/ciyBwYIUJvIfSYGNt297Q7pBUoelvfBxwCPcBGAYYCw/s320/10-step-journey-10.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;In a few weeks, on 24 April 2018, I'm going to be on the west coast of the US. I reached out to the local user groups some time ago and we've completed the planning to drop by for an evening of fun in the cloud.&lt;br /&gt;&lt;br /&gt;It's very exciting to be presenting in my home town, something I don't think I have ever done before believe it or not.&lt;br /&gt;&lt;br /&gt;The Portland, Oregon Java User Group, known as &lt;a href="https://www.meetup.com/PDXJUG/events/249695216/" target="_blank"&gt;PJUG&lt;/a&gt;, will &lt;a href="https://www.meetup.com/PDXJUG/events/249695216/" target="_blank"&gt;be hosting my talk&lt;/a&gt;. Register and let them know you're coming &lt;a href="https://www.blogger.com/Really%20excited,%20going%20to%20be%20talking%20at%20the%20local%20(for%20me,%20it's%20my%20home%20town)%20#Java%20User%20Group...%20join%20me%20for%20an%20evening%20of%20cloud%20fun%20as%20we%20talk%20about%2010%20Steps%20to%20Cloud%20Happiness%20at%20the%20#PDXJUG%20on%20the%2024th%20of%20April%202018!%20https://www.meetup.com/PDXJUG/events/249695216" target="_blank"&gt;in the Meetup group&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;My talk abstract is all about having fun on your own laptop:&lt;br /&gt;&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;10 Steps to Cloud Happiness&lt;/h3&gt;&lt;i&gt;Eric Schabell (http://www.schabell.org), an evangelist director from Red Hat, will be presenting a hands-on workshop for OpenShift, JBoss, Ansible, (et al), including several container based java example projects.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;i&gt;A modern developers world is full of new tools, new technologies and getting started can become a bit daunting. Let's take a tour of how to get started with containers, Cloud and some examples so that you have your very own private PaaS Cloud on your laptop. You'll be given a private Cloud in minutes that turns your laptop into a container platform where you then can explore a multitude of example projects from such domains as retail, travel, finance and more. Hold on to your developer hats as we get you started on application development in the Cloud with open technologies, Ansible deployment automation and container-based fun. Everything you're shown in this session is available for attendees to explore online and hands-on once they've returned home.&lt;/i&gt;&lt;br /&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;Hope to see you all there!&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=cZBQF1JK3yU:eljfeChvRs4:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=cZBQF1JK3yU:eljfeChvRs4:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=cZBQF1JK3yU:eljfeChvRs4:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=cZBQF1JK3yU:eljfeChvRs4:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=cZBQF1JK3yU:eljfeChvRs4:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=cZBQF1JK3yU:eljfeChvRs4:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=cZBQF1JK3yU:eljfeChvRs4:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=cZBQF1JK3yU:eljfeChvRs4:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=cZBQF1JK3yU:eljfeChvRs4:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=cZBQF1JK3yU:eljfeChvRs4:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=cZBQF1JK3yU:eljfeChvRs4:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/cZBQF1JK3yU" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/9mHhERBu4N0" height="1" width="1" alt=""/&gt;</content><summary>In a few weeks, on 24 April 2018, I'm going to be on the west coast of the US. I reached out to the local user groups some time ago and we've completed the planning to drop by for an evening of fun in the cloud. It's very exciting to be presenting in my home town, something I don't think I have ever done before believe it or not. The Portland, Oregon Java User Group, known as PJUG, will be hosting...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2018-04-13T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/cZBQF1JK3yU/portland-java-user-group-10-steps-to-cloud-happiness.html</feedburner:origLink></entry><entry><title>Hibernate Search 5.10.0.Beta2 is out!</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/DwgoGHY7DcM/" /><category term="elasticsearch" scheme="searchisko:content:tags" /><category term="feed_group_name_hibernate" scheme="searchisko:content:tags" /><category term="feed_name_inrelationto" scheme="searchisko:content:tags" /><category term="hibernate search" scheme="searchisko:content:tags" /><category term="releases" scheme="searchisko:content:tags" /><author><name>unknown</name></author><id>searchisko:content:id:jbossorg_blog-hibernate_search_5_10_0_beta2_is_out</id><updated>2018-04-13T10:08:00Z</updated><published>2018-04-13T00:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We just published 5.10.0.Beta2, the second beta release for the 5.10 branch. This release mainly includes an upgrade to WildFly 12 for the JBoss modules, but it also adds a few bugfixes and improvements: see below!&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="what-s-new"&gt;&lt;a class="anchor" href="#what-s-new"&gt;&lt;/a&gt;What’s new?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Here are some notable changes since Hibernate Search 5.10.0.Beta1:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HSEARCH-3022"&gt;HSEARCH-3022&lt;/a&gt;: Hibernate Search’s JBoss modules now target WildFly 12 and are tested against it instead of WildFly 11.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HSEARCH-2598"&gt;HSEARCH-2598&lt;/a&gt;: The JGroups backend now integrates with JGroups 4 and is no longer compatible with JGroups 3.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HSEARCH-3030"&gt;HSEARCH-3030&lt;/a&gt;: We moved the JGroups backend’s JBoss modules out of the engine feature pack to &lt;a href="https://docs.jboss.org/hibernate/search/5.10/reference/en-US/html_single/#_jgroups_feature_pack"&gt;a dedicated feature pack&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HSEARCH-3026"&gt;HSEARCH-3026&lt;/a&gt;: If your Elasticsearch cluster is accessed through a URL with a non-root path, you can now use &lt;code&gt;hibernate.search.default.elasticsearch.path_prefix&lt;/code&gt; to tell Hibernate Search about that path.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HSEARCH-3039"&gt;HSEARCH-3039&lt;/a&gt;: We removed the ability to analyze document identifiers from Search a few versions ago, but some parts of Hibernate Search still performed analysis on document identifiers in some cases, in particular when querying them and when embedding a document ID using &lt;code&gt;@IndexedEmbedded&lt;/code&gt;. This has been fixed: Hibernate Search now consistently skips analysis on document identifiers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HSEARCH-3021"&gt;HSEARCH-3021&lt;/a&gt;: The integration to dependency injection frameworks is now &lt;a href="https://docs.jboss.org/hibernate/search/5.10/reference/en-US/html_single/#section-bridge-dependency-injection"&gt;properly documented&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;For a full list of changes since 5.10.0.Beta1, please see &lt;a href="https://hibernate.atlassian.net/secure/ReleaseNote.jspa?projectId=10061&amp;amp;version=31627"&gt;the release notes&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="next"&gt;&lt;a class="anchor" href="#next"&gt;&lt;/a&gt;Next&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;We are currently still waiting for Hibernate ORM 5.3.0.Final to be released. You can expect a CR1 of Hibernate Search 5.10 soon after the ORM 5.3.0.Final release.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="how-to-get-this-release"&gt;&lt;a class="anchor" href="#how-to-get-this-release"&gt;&lt;/a&gt;How to get this release&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;All details are available and up to date on &lt;a href="http://hibernate.org/search/releases/5.10/#get-it"&gt;the dedicated page on hibernate.org&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="feedback-issues-ideas"&gt;&lt;a class="anchor" href="#feedback-issues-ideas"&gt;&lt;/a&gt;Feedback, issues, ideas?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;To get in touch, use the following channels:&lt;/p&gt; &lt;/div&gt; &lt;div class="ulist"&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://stackoverflow.com/questions/tagged/hibernate-search"&gt;hibernate-search tag on Stackoverflow&lt;/a&gt; (usage questions)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://discourse.hibernate.org/c/hibernate-search"&gt;User forum&lt;/a&gt; (usage questions, general feedback)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="https://hibernate.atlassian.net/browse/HSEARCH"&gt;Issue tracker&lt;/a&gt; (bug reports, feature requests)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;a href="http://lists.jboss.org/pipermail/hibernate-dev/"&gt;Mailing list&lt;/a&gt; (development-related discussions)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/DwgoGHY7DcM" height="1" width="1" alt=""/&gt;</content><summary>We just published 5.10.0.Beta2, the second beta release for the 5.10 branch. This release mainly includes an upgrade to WildFly 12 for the JBoss modules, but it also adds a few bugfixes and improvements: see below! What’s new? Here are some notable changes since Hibernate Search 5.10.0.Beta1: HSEARCH-3022: Hibernate Search’s JBoss modules now target WildFly 12 and are tested against it instead of ...</summary><dc:creator>unknown</dc:creator><dc:date>2018-04-13T00:00:00Z</dc:date><feedburner:origLink>http://in.relation.to/2018/04/13/hibernate-search-5-10-0-Beta2/</feedburner:origLink></entry><entry><title>A small update on RichFaces</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/OnMPsWT_4g8/a-small-update-on-richfaces" /><category term="feed_group_name_jbossrichfaces" scheme="searchisko:content:tags" /><category term="feed_name_michpetrov_blog" scheme="searchisko:content:tags" /><category term="richfaces" scheme="searchisko:content:tags" /><author><name>Michal Petrov</name></author><id>searchisko:content:id:jbossorg_blog-a_small_update_on_richfaces</id><updated>2018-04-12T16:36:46Z</updated><published>2018-04-12T16:36:46Z</published><content type="html">&lt;!-- [DocumentBodyStart:b54766e1-c99f-4660-b67e-0c3a901a65b7] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;It has now been almost two years since the development of RichFaces ended, however since people are still using it I just want to clear up a few things.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h3&gt;Showcases&lt;/h3&gt;&lt;p&gt;The showcases were down earlier this year, I had to switch hosting and it didn't go as smoothly as expected. &lt;a class="jive-link-external-small" href="http://showcase.richfaces.org/" rel="nofollow"&gt;showcase.richfaces.org&lt;/a&gt; is now back up and should hopefully remain so for at least another year. Showcase for RF 3 is however not coming back, if you want to use it you will have to deploy it locally; it's just not feasible for me to get it up and running. I found out the demos that were hosted at exadel.com are now also down but I have no control over those.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h3&gt;JIRA, forums and other things&lt;/h3&gt;&lt;p&gt;As far as I know there are no plans to shut down the current "infrastructure" (JIRA, source repositories, this whole site). That said I do not recommend using the JIRA, I'm generally ignoring it. If you want to get a hold of me the forum is the best place to do it. You can also try the &lt;a class="jive-link-external-small" href="https://twitter.com/richfaces" rel="nofollow"&gt;RichFaces Twitter&lt;/a&gt; but I don't check it that often.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;That's about it. Should things change I'll post an update. If you have any questions ask in the comments.&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:b54766e1-c99f-4660-b67e-0c3a901a65b7] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/OnMPsWT_4g8" height="1" width="1" alt=""/&gt;</content><summary>It has now been almost two years since the development of RichFaces ended, however since people are still using it I just want to clear up a few things.   Showcases The showcases were down earlier this year, I had to switch hosting and it didn't go as smoothly as expected. showcase.richfaces.org is now back up and should hopefully remain so for at least another year. Showcase for RF 3 is however n...</summary><dc:creator>Michal Petrov</dc:creator><dc:date>2018-04-12T16:36:46Z</dc:date><feedburner:origLink>https://developer.jboss.org/people/michpetrov/blog/2018/04/12/a-small-update-on-richfaces</feedburner:origLink></entry><entry><title>Bringing Coolstore Microservices to the Service Mesh: Part 2–Manual Injection</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/GzMzljKuuIg/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="istio" scheme="searchisko:content:tags" /><category term="JBoss Fuse" scheme="searchisko:content:tags" /><category term="jboss middleware" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="OpenShift Enterprise by Red Hat" scheme="searchisko:content:tags" /><category term="Red Hat JBoss Enterprise Application Platform" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Application Runtimes" scheme="searchisko:content:tags" /><category term="service mesh" scheme="searchisko:content:tags" /><author><name>James Falkner</name></author><id>searchisko:content:id:jbossorg_blog-bringing_coolstore_microservices_to_the_service_mesh_part_2_manual_injection</id><updated>2018-04-12T16:12:15Z</updated><published>2018-04-12T16:12:15Z</published><content type="html">&lt;p&gt;&lt;img class=" alignright size-medium wp-image-471597 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/03/combo-1024x570.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/03/combo-300x167.png" alt="Coolstore+Istio Logo" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/03/combo-300x167.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/03/combo-768x427.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/03/combo-1024x570.png 1024w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;p&gt;In the &lt;a href="https://developers.redhat.com/blog/2018/04/05/coolstore-microservices-service-mesh-part-1-exploring-auto-injection/"&gt;first part of this series&lt;/a&gt; we explored the &lt;a href="https://istio.io"&gt;Istio&lt;/a&gt; project and how Red Hat is committed to and actively involved in the project and working to integrate it into Kubernetes and &lt;a href="http://openshift.com"&gt;OpenShift&lt;/a&gt; to bring the benefits of a service mesh to our customers and the wider communities involved. If you want to play with Istio, check out the &lt;a href="https://learn.openshift.com/servicemesh/"&gt;service mesh tutorials on learn.openshift.com&lt;/a&gt;. If you want to install it, follow the &lt;a href="https://istio.io/docs/setup/kubernetes/quick-start.html"&gt;Istio Kubernetes quickstart instructions&lt;/a&gt; and install it on OpenShift 3.7 or later. Also don&amp;#8217;t miss &lt;a href="https://developers.redhat.com/blog/2018/03/06/introduction-istio-makes-mesh-things/"&gt;Don Schenck&amp;#8217;s series of blogs on Istio technology&lt;/a&gt; in general to learn more about it and what Red Hat is doing in this space.&lt;/p&gt; &lt;p&gt;In this post, we will deploy the existing &lt;a href="https://github.com/jbossdemocentral/coolstore-microservice"&gt;Coolstore microservices demo&lt;/a&gt; as a service mesh and start to demonstrate the tangible value you can get out of the system without any major rewrite or rearchitecture of the existing app. We&amp;#8217;ll also improve our project along the way to adhere to Istio (and general microservice) best practices. In the real world, your applications and developers often make bad assumptions or fail to implement best practices, so with this information you can learn something about your own projects. For Coolstore, many of these workarounds will eventually find their way into the source code of the demo.&lt;/p&gt; &lt;h2&gt;Getting Started&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s assume you already have OpenShift 3.7+ installed (I am using &lt;a href="https://github.com/openshift/origin/releases/tag/v3.9.0-alpha.3"&gt;OpenShift Origin 3.9.0.alpha3&lt;/a&gt; because at press time, OpenShift Container Platform 3.9 has not yet been released). Let&amp;#8217;s further assume you&amp;#8217;ve &lt;a href="https://istio.io/docs/setup/kubernetes/quick-start.html"&gt;installed Istio 0.6.0 or later&lt;/a&gt;, including the Prometheus, Servicegraph, Jaeger, and Grafana plug-ins  (see the shell script installer in the &lt;em&gt;More Reading&lt;/em&gt; section below for instructions on how to install istio and its plug-ins). Verify Istio is installed and running in the &lt;code&gt;istio-system&lt;/code&gt; namespace:&lt;/p&gt; &lt;pre&gt;% oc get pods -n istio-system NAME READY STATUS RESTARTS AGE grafana-89f97d9c-2wtxx 1/1 Running 0 7m istio-ca-59f6dcb7d9-bs9hx 1/1 Running 0 7m istio-ingress-779649ff5b-jw4hg 1/1 Running 0 7m istio-mixer-7f4fd7dff-pct4j 3/3 Running 0 7m istio-pilot-5f5f76ddc8-pvq4d 2/2 Running 0 7m jaeger-deployment-559c8b9b8-klspv 1/1 Running 0 7m prometheus-cf8456855-svpmb 1/1 Running 0 7m servicegraph-59ff5dbbff-7zrfp 1/1 Running 0 7m &lt;/pre&gt; &lt;p&gt;Let&amp;#8217;s get started. Clone the Coolstore repo and then play along:&lt;/p&gt; &lt;pre&gt;% git clone https://github.com/jbossdemocentral/coolstore-microservice&lt;/pre&gt; &lt;p&gt;And make sure you are logged in as a cluster administrator, or you have &lt;em&gt;cluster-admin&lt;/em&gt; privileges, since it&amp;#8217;ll require you to make some policy and permission changes later on. (As mentioned in part 1, this will be fine-tuned in future Istio releases to not require so much privilege and permission.) You can do this by logging in as a cluster administrator, or if you have sudoer privileges, you can add &lt;code&gt;--as=system:admin&lt;/code&gt; to all the &lt;code&gt;oc&lt;/code&gt; commands below.&lt;/p&gt; &lt;h2&gt;Manual Injection of Sidecars&lt;/h2&gt; &lt;p&gt;In part 1, I showed that with sidecar auto-injection, your app&amp;#8217;s pods are automatically festooned with Envoy proxies without ever having to change the application&amp;#8217;s deployments. However, there are issues with it that currently prevent us from using it. For now, we&amp;#8217;ll do manual injection. Manually injecting has the obvious drawback that you have to do the injection, but it has a big benefit as well: you need to do it only once (per release of Istio), and once it&amp;#8217;s done you can check in the results to your source code management system—&lt;a href="https://en.wikipedia.org/wiki/Infrastructure_as_Code"&gt;infrastructure as code&lt;/a&gt; and all that.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s first set a few environment variables in our Linux shell so we can reference them later on. (Just copy and paste all of these commands into your Linux terminal. If you&amp;#8217;re on Windows, &lt;a href="https://www.howtogeek.com/261591/how-to-create-and-run-bash-shell-scripts-on-windows-10/"&gt;there is hope for you&lt;/a&gt;.)&lt;/p&gt; &lt;pre&gt;# Version of Istio we are using ISTIO_VERSION=0.6.0 # The name of the OpenShift project into which you installed Istio. It should # be istio-system as that's what the Istio nstaller creates for you ISTIO_PROJECT=istio-system # Name of project to house our coolstore service mesh COOLSTORE_PROJECT=coolstore-mesh # Location of istio binaries that you downloaded and installed from istio.io ISTIO_HOME=${HOME}/istio-${ISTIO_VERSION} # Location of Coolstore microservice demo repo COOLSTORE_HOME=${HOME}/coolstore-microservice &lt;/pre&gt; &lt;p&gt;The Coolstore Microservice demo uses a lot of &lt;a href="https://www.redhat.com/en/resources/red-hat-jboss-middleware"&gt;JBoss middleware&lt;/a&gt;, so let&amp;#8217;s install the necessary image stream definitions into the &lt;code&gt;openshift&lt;/code&gt; namespace:&lt;/p&gt; &lt;pre&gt;oc create -n openshift -f https://raw.githubusercontent.com/jboss-fuse/application-templates/master/fis-image-streams.json oc create -n openshift -f https://raw.githubusercontent.com/jboss-openshift/application-templates/master/jboss-image-streams.json&lt;/pre&gt; &lt;p&gt;Next, create a project to house the mesh and give the default &lt;em&gt;serviceaccount&lt;/em&gt; within the project the necessary permissions for Istio to do its thing:&lt;/p&gt; &lt;pre&gt;oc new-project $COOLSTORE_PROJECT oc adm policy add-scc-to-user privileged -z default oc adm policy add-scc-to-user anyuid -z default&lt;/pre&gt; &lt;p&gt;Now comes the &lt;em&gt;big bang&lt;/em&gt;. The &lt;a href="https://github.com/jbossdemocentral/coolstore-microservice"&gt;coolstore microservice demo&lt;/a&gt; comes with a giant &lt;a href="https://docs.openshift.org/latest/dev_guide/templates.html"&gt;OpenShift template&lt;/a&gt; that will create the microservices and associated databases in your new project. It will fire off a number of builds that should eventually succeed, but like many real-world projects, ours does not adhere fully to best practices for container-based microservices, so we&amp;#8217;ll need to work around these issues. We will use &lt;code&gt;oc process&lt;/code&gt; to convert the template into a list of Kubernetes objects, and then pass them through the Istio &lt;a href="https://istio.io/docs/reference/commands/istioctl.html#istioctl%20kube-inject"&gt;manual injection CLI&lt;/a&gt;, which will do the same thing as auto-injection, but do it outside of OpenShift itself. Finally, after passing through the manual injector (istioctl kube-inject), the results are sent to OpenShift via &lt;code&gt;oc apply&lt;/code&gt;. You could instead capture the output and save it to your source code management system, but for demo purposes we&amp;#8217;ll just send it directly to OpenShift. Right after deploying Coolstore, we&amp;#8217;ll stop the deployments using &lt;code&gt;oc rollout cancel&lt;/code&gt; to give us a chance to do some hacking before things are up and running:&lt;/p&gt; &lt;pre&gt;oc process -f ${COOLSTORE_HOME}/openshift/coolstore-template.yaml | \ ${ISTIO_HOME}/bin/istioctl kube-inject -f - | \ oc apply -f - for i in $(oc get dc -o name) ; do oc rollout cancel $i oc rollout pause $i done &lt;/pre&gt; &lt;p&gt;At this point, your builds should be progressing (and CPU contributing to the &lt;a href="https://en.wikipedia.org/wiki/Heat_death_of_the_universe"&gt;heat death of the universe&lt;/a&gt;):&lt;/p&gt; &lt;pre&gt;% oc get builds NAME TYPE FROM STATUS STARTED DURATION cart-1 Source Git@f63f51d Running 37 seconds ago catalog-1 Source Git@f63f51d Running 38 seconds ago coolstore-gw-1 Source Git@f63f51d Running 38 seconds ago inventory-1 Source Git@f63f51d Running 38 seconds ago pricing-1 Source Git@f63f51d Running 37 seconds ago rating-1 Source Git@f63f51d Running 37 seconds ago review-1 Source Git@f63f51d Running 37 seconds ago web-ui-1 Source Git@f63f51d Running 38 seconds ago &lt;/pre&gt; &lt;p&gt;You can keep running &lt;code&gt;oc get builds&lt;/code&gt; until the &lt;code&gt;STATUS&lt;/code&gt; column shows &lt;code&gt;Complete&lt;/code&gt;, but you don&amp;#8217;t have to wait for it in order to continue below.&lt;/p&gt; &lt;p&gt;While the builds are progressing (and deployments are cancelled), one of the first best practices this application does NOT follow is naming the service and container ports used. &lt;a href="https://istio.io/docs/setup/kubernetes/sidecar-injection.html#pod-spec-requirements"&gt;Istio currently requires that for services to participate in the service mesh, their exposed TCP ports must be named&lt;/a&gt;, and they must be named starting with &lt;code&gt;http&lt;/code&gt; or &lt;code&gt;https&lt;/code&gt;. Istio can only intelligently route and trace &lt;a href="https://en.wikipedia.org/wiki/Server_Name_Indication"&gt;SNI or equivalent protocols&lt;/a&gt; such as HTTP and HTTPS that have parseable headers indicating the destination host, so by explicitly naming the service and container ports, you are confirming with Istio your service&amp;#8217;s intention to participate. It just so happens that all the Coolstore services bind to port 8080, so let&amp;#8217;s hack the demo and brute-force name all the service ports &lt;code&gt;http&lt;/code&gt; for simplicity:&lt;/p&gt; &lt;pre&gt;for i in $(oc get svc -o name) ; do PATCH=$(mktemp) cat &amp;#60;&amp;#60;EOF &amp;#62; $PATCH spec: ports: - name: http port: 8080 protocol: TCP targetPort: http EOF oc patch $i -p "$(cat $PATCH)" rm -f $PATCH done&lt;/pre&gt; &lt;p&gt;With the above code, all our services&amp;#8217; ports are now &lt;em&gt;named&lt;/em&gt; (with the exception of database service ports, which you&amp;#8217;ll see in the output are skipped)&lt;em&gt;.&lt;/em&gt; We need to do the same for our containers, and we also need to add some sleep time (see part 1 or consult your doctor for an explanation of the need for sleep). Istio&amp;#8217;s intelligent routing can also &lt;a href="https://istio.io/docs/concepts/traffic-management/request-routing.html#service-model-and-service-versions"&gt;operate on service versions&lt;/a&gt;, so you can do things like &lt;a href="https://voxxeddays.com/romania/2018/01/22/istio-on-kubernetes-canaries-chaos-and-dark-launches/"&gt;canary deployments or dark launches&lt;/a&gt; of different versions of a service. So we&amp;#8217;ll add a version specifier of &lt;code&gt;v1&lt;/code&gt; for all services (later, we&amp;#8217;ll do fun things with this). So here&amp;#8217;s the magic hack to do all of that to our DeploymentConfigs:&lt;/p&gt; &lt;pre&gt;for i in $(oc get dc -o name) ; do oc label $i version=v1 DCNAME=$(echo $i | cut -d'/' -f 2) PATCH=$(mktemp) cat &amp;#60;&amp;#60;EOF &amp;#62; $PATCH spec: strategy: customParams: command: - /bin/sh - '-c' - 'sleep 5; echo slept for 5; /usr/bin/openshift-deploy' template: metadata: labels: version: v1 spec: containers: - name: $DCNAME ports: - containerPort: 8080 name: http protocol: TCP EOF oc patch $i -p "$(cat $PATCH)" rm -f $PATCH done&lt;/pre&gt; &lt;p&gt;Next, since this demo is often used on low-powered laptops, by default, we disable (scale to 0 pods) some services. But because we&amp;#8217;re in big bang mode, let&amp;#8217;s turn those services back on:&lt;/p&gt; &lt;pre&gt;for i in rating rating-mongodb review review-postgresql pricing ; do oc scale --replicas=1 dc $i done&lt;/pre&gt; &lt;p&gt;We&amp;#8217;re almost there. The next issue is with &lt;a href="https://developers.redhat.com/products/eap"&gt;JBoss EAP&lt;/a&gt;. Out of the box, when the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.0/html/red_hat_jboss_enterprise_application_platform_for_openshift/"&gt;containerized JBoss EAP image&lt;/a&gt; starts up, it binds its &lt;a href="http://undertow.io/"&gt;Undertow&lt;/a&gt; listeners to a private IP address (the output of &lt;code&gt;hostname -i&lt;/code&gt;). Due to the networking magic of Istio, it expects containers to bind to its public IP address or &lt;code&gt;0.0.0.0&lt;/code&gt; (that is, all interfaces, and it&amp;#8217;s not documented anywhere that I could find). Unfortunately for us, the bind address for JBoss EAP is fixed to always bind to a private IP address on an interface that Istio does not control or proxy, so we have to resort to another hack to work around this. This hack modifies the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_enterprise_application_platform/7.0/html/red_hat_jboss_enterprise_application_platform_for_openshift/"&gt;JBoss EAP S2I builder image&lt;/a&gt;, creating a derived builder image (using the container image format that shall not be named) that we then use to rebuild our JBoss EAP–based inventory microservice so that it binds to &lt;code&gt;0.0.0.0&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;cat &amp;#60;&amp;#60;EOF | oc new-build --name inventory-builder -D - FROM registry.access.redhat.com/jboss-eap-7/eap70-openshift:1.6 RUN sed -i 's/JBOSS_HA_ARGS="-b \${IP_ADDR}/JBOSS_HA_ARGS="-b 0.0.0.0/' /opt/eap/bin/launch/ha.sh EOF&lt;/pre&gt; &lt;p&gt;Wait for it to complete:&lt;/p&gt; &lt;pre&gt;for i in {1..200}; do oc logs -f bc/inventory-builder &amp;#38;&amp;#38; break || sleep 1; done&lt;/pre&gt; &lt;p&gt;And then rebuild the inventory service using S2I:&lt;/p&gt; &lt;pre&gt;oc new-build --name inventory-hack --to='inventory:latest' ${COOLSTORE_PROJECT}/inventory-builder~${COOLSTORE_HOME} --context-dir=inventory-service&lt;/pre&gt; &lt;p&gt;And wait for it to complete:&lt;/p&gt; &lt;pre&gt;for i in {1..200}; do oc logs -f bc/inventory-hack &amp;#38;&amp;#38; break || sleep 1; done&lt;/pre&gt; &lt;p&gt;One final hack to go. We are using &lt;a href="https://developers.redhat.com/products/fuse"&gt;JBoss Fuse&lt;/a&gt; to implement our Coolstore gateway (which fronts all of our microservices and provides aggregated data back to the UI at runtime). Unfortunately, some features of &lt;a href="https://camel.apache.org"&gt;Camel&lt;/a&gt; (most notably the ones we are using to implement our &lt;a href="http://camel.apache.org/aggregator.html"&gt;AggregationStrategy&lt;/a&gt;) &lt;em&gt;strip&lt;/em&gt; HTTP headers when making downstream calls to other services. This will interfere with &lt;a href="http://opentracing.io/"&gt;proper tracing&lt;/a&gt;, causing the downstream calls to appear as individual &lt;a href="http://opentracing.io/documentation/"&gt;traces&lt;/a&gt; with a single &lt;a href="http://opentracing.io/documentation/"&gt;span&lt;/a&gt; rather than as a single trace containing aggregated spans representing the downstream calls. Proper tracing comes relatively free with the Istio+Prometheus+Jaeger combination so popular these days, and there&amp;#8217;s a lot of value that can be extracted when tracing works, so let&amp;#8217;s hack around this limitation by modifying the source code to the Coolstore gateway to preserve the headers.&lt;/p&gt; &lt;p&gt;This hack assumes you have &lt;a href="https://maven.apache.org/download.cgi"&gt;Maven 3.3.9+ installed&lt;/a&gt;, because it will do an in-place edit of the source using &lt;code&gt;sed&lt;/code&gt;, then do a local rebuild of the hacked source code with Maven, and finally kick off an OpenShift S2I binary rebuild of the service on your local machine:&lt;/p&gt; &lt;pre&gt;sed -i.bak 's/return original;/original.getOut().setHeaders(original.getIn().getHeaders()); return original;/g' \ $COOLSTORE_HOME/coolstore-gw/src/main/java/com/redhat/coolstore/api_gateway/ProductGateway.java mvn -f $COOLSTORE_HOME/coolstore-gw clean package -DskipTests -Dfabric8.skip -e -B oc new-build --name coolstore-gw-hack --to='coolstore-gw:latest' --image fis-java-openshift:2.0 --strategy source --binary oc start-build coolstore-gw-hack --from-file=${COOLSTORE_HOME}/coolstore-gw/target/coolstore-gw.jar --follow &lt;/pre&gt; &lt;p&gt;One other best practice that Coolstore fails to follow is to declare all of the exposed ports in containers that you wish to access. Istio&amp;#8217;s proxy will proxy traffic only to named and declared ports, so if your containers are listening on undeclared or unnamed ports, you won&amp;#8217;t be able to access them, even from within the running container, because Istio transparently intercepts all traffic and passes traffic only on named ports. So in this case, our Coolstore gateway has failed to declare port 8081 (the port on which its &lt;a href="https://docs.openshift.org/latest/dev_guide/application_health.html"&gt;health probes&lt;/a&gt; are exposed), so the health checks will fail. So for now, let&amp;#8217;s disable the Coolstore gateway health check (which in itself is a bad practice, and should be eventually fixed in Coolstore itself):&lt;/p&gt; &lt;pre&gt;oc set probe dc/coolstore-gw --readiness --liveness --remove&lt;/pre&gt; &lt;h2&gt;The Final Step&lt;/h2&gt; &lt;p&gt;Wow; that&amp;#8217;s a lot of hacking. With our newly minted and Istio-ified project, it&amp;#8217;s time to redeploy everything. We&amp;#8217;ll use &lt;code&gt;oc rollout&lt;/code&gt; to do this for all of our deployments:&lt;/p&gt; &lt;pre&gt;for i in $(oc get dc -o name) ; do oc rollout resume $i oc rollout latest $i done&lt;/pre&gt; &lt;p&gt;Wait for the redeployments to complete:&lt;/p&gt; &lt;pre&gt;for i in $(oc get dc -o name) ; do   oc rollout status -w $i done&lt;/pre&gt; &lt;p&gt;If the above command reports timeouts, just rerun the &lt;code&gt;for&lt;/code&gt; loop until all deployments report success.&lt;/p&gt; &lt;p&gt;Ordinarily at this point, once all the deployments complete, you could access the UI of Coolstore directly, but we will use the built-in &lt;a href="https://istio.io/docs/tasks/traffic-management/ingress.html"&gt;Istio Ingress component&lt;/a&gt; so that we can fully control routing of the incoming requests and generate respectable distributed traces from the start of the requests:&lt;/p&gt; &lt;pre&gt;cat &amp;#60;&amp;#60;EOF | oc create -f - apiVersion: extensions/v1beta1 kind: Ingress metadata: name: coolstore-ingress annotations: kubernetes.io/ingress.class: "istio" spec: backend: serviceName: web-ui servicePort: http rules: - http: paths: - path: /api/* backend: serviceName: coolstore-gw servicePort: http EOF&lt;/pre&gt; &lt;p&gt;This will set up &lt;a href="https://istio.io/docs/tasks/traffic-management/ingress.html"&gt;Istio Ingress&lt;/a&gt; to route requests for &lt;code&gt;/api/*&lt;/code&gt; to our Coolstore gateway, and all other requests will just go to the web UI front end. You will access the application through the Ingress route installed in the &lt;code&gt;istio-system&lt;/code&gt; project (you did run &lt;code&gt;oc expose svc/istio-ingress -n istio-system&lt;/code&gt;, right?)&lt;/p&gt; &lt;p&gt;After everything is rebuilt and all the deployments are successfully rolled out, you should be able to access the Coolstore UI through the Istio Ingress service URL in your browser, which you can generate with this command:&lt;/p&gt; &lt;pre&gt;echo "CoolStore URL: http://$(oc get route istio-ingress -n ${ISTIO_PROJECT} --template='{{ .spec.host }}')"&lt;/pre&gt; &lt;p&gt;&lt;img class=" alignright size-medium wp-image-471607 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/03/Screen-Shot-2018-03-20-at-9.35.15-AM-1024x460.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/03/Screen-Shot-2018-03-20-at-9.35.15-AM-1024x460.png" alt="CoolStore Web UI Screenshot" width="640" height="288" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/03/Screen-Shot-2018-03-20-at-9.35.15-AM-1024x460.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/03/Screen-Shot-2018-03-20-at-9.35.15-AM-300x135.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/03/Screen-Shot-2018-03-20-at-9.35.15-AM-768x345.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;You can also access the web consoles of various services such as Prometheus and Grafana. Run these commands and then copy/paste the URLs into your browser to verify that everything is working:&lt;/p&gt; &lt;pre&gt;echo "Primary web frontend URL: http://$(oc get route istio-ingress -n ${ISTIO_PROJECT} --template='{{ .spec.host }}')" echo "D3 force layout service graph: http://$(oc get route servicegraph -n ${ISTIO_PROJECT} --template='{{ .spec.host }}')/force/forcegraph.html?time_horizon=5m&amp;#38;filter_empty=true" echo "Example Prometheus query: http://$(oc get route prometheus -n ${ISTIO_PROJECT} --template='{{ .spec.host }}')/graph?g0.range_input=30m&amp;#38;g0.expr=istio_request_count&amp;#38;g0.tab=0" echo "Grafana Istio Dashboard: http://$(oc get route grafana -n ${ISTIO_PROJECT} --template='{{ .spec.host }}')/d/1/istio-dashboard?refresh=5s&amp;#38;orgId=1" echo "Jaeger Tracing Console: http://$(oc get route jaeger-query -n ${ISTIO_PROJECT} --template='{{ .spec.host }}')"&lt;/pre&gt; &lt;p&gt;We will explore these in the next post, but feel free to play around, access the page, generate some load, and inspect the results.&lt;/p&gt; &lt;p&gt;For added fun and value, access the &lt;em&gt;Web front-end URL&lt;/em&gt; a few times in your browser, and then check out the &lt;em&gt;D3 Force Layout endpoint&lt;/em&gt; above. It should look something like this:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignright size-medium wp-image-471617 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/03/Screen-Shot-2018-03-20-at-9.33.36-AM-1024x956.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/03/Screen-Shot-2018-03-20-at-9.33.36-AM-1024x956.png" alt="Service Graph of Coolstore screenshot" width="640" height="598" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/03/Screen-Shot-2018-03-20-at-9.33.36-AM-1024x956.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/03/Screen-Shot-2018-03-20-at-9.33.36-AM-300x280.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/03/Screen-Shot-2018-03-20-at-9.33.36-AM-768x717.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/03/Screen-Shot-2018-03-20-at-9.33.36-AM.png 1478w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;The diagram is pretty confusing, because some of the non-HTTP/S accesses (for example, to databases) aren&amp;#8217;t properly linked to the services calling them because Istio cannot interpret these calls. But you can, for example, see that the coolstore-gw makes several downstream calls to other services (inventory, catalog, rating, cart) and these will also show up as proper traces and spans in Jaeger.&lt;/p&gt; &lt;h2&gt;Summary and Observations&lt;/h2&gt; &lt;p&gt;This is a quick way to see a visualization of the service dependencies and confirm that the gateway is indeed accessing the underlying microservices. Some observations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;You should name all of your container and service ports. You may have noticed in the hacks above we brute-force named all services on port 8080 as &lt;code&gt;http&lt;/code&gt;, but non-HTTP services (most notably PostgreSQL and MongoDB, both of which use non-HTTP protocols) were skipped/ignored. These services cannot participate in the service mesh because Istio currently cannot route these services.&lt;/li&gt; &lt;li&gt;Containerized JBoss EAP has a limitation that we worked around.&lt;/li&gt; &lt;li&gt;JBoss Fuse has an unfortuate side effect for HTTP headers that we worked around.&lt;/li&gt; &lt;li&gt;Manual injection is most likely better than auto-injection in production because you can capture it in infrastructure source code.&lt;br /&gt; Auto-injection is great for demos (once this issue is resolved).&lt;/li&gt; &lt;li&gt;There is HUGE value in Istio+OpenShift for existing apps, whether they use microservices or not.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In the next part of this series, we&amp;#8217;ll explore additional value you can get out of Istio+OpenShift for existing applications, and we&amp;#8217;ll even detect and fix a few issues in our distributed microservice application using the power of Istio service mesh and Red Hat technology. Stay tuned!&lt;/p&gt; &lt;h2&gt;More Reading&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/04/05/coolstore-microservices-service-mesh-part-1-exploring-auto-injection/"&gt;Bringing Coolstore microservices to the Service Mesh Part 1: Automatic Injection&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://gist.github.com/jamesfalkner/ff51aa7e259d9f9c02fd79be757ef12c"&gt;A runnable shell script gist of all of the above hacks including Istio installation&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="http://blog.christianposta.com/tags/#istio"&gt;Christian Posta on Istio&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2018/03/06/introduction-istio-makes-mesh-things/"&gt;Introduction to Istio; It Makes A Mesh Of Things, by Don Schenck&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/tag/istio/"&gt;Red Hat Developer Blogs on Istio&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F12%2Fbringing-coolstore-microservices-to-the-service-mesh-part-2-manual-injection%2F&amp;#38;linkname=Bringing%20Coolstore%20Microservices%20to%20the%20Service%20Mesh%3A%20Part%202%E2%80%93Manual%20Injection" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F12%2Fbringing-coolstore-microservices-to-the-service-mesh-part-2-manual-injection%2F&amp;#38;linkname=Bringing%20Coolstore%20Microservices%20to%20the%20Service%20Mesh%3A%20Part%202%E2%80%93Manual%20Injection" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F12%2Fbringing-coolstore-microservices-to-the-service-mesh-part-2-manual-injection%2F&amp;#38;linkname=Bringing%20Coolstore%20Microservices%20to%20the%20Service%20Mesh%3A%20Part%202%E2%80%93Manual%20Injection" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F12%2Fbringing-coolstore-microservices-to-the-service-mesh-part-2-manual-injection%2F&amp;#38;linkname=Bringing%20Coolstore%20Microservices%20to%20the%20Service%20Mesh%3A%20Part%202%E2%80%93Manual%20Injection" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F12%2Fbringing-coolstore-microservices-to-the-service-mesh-part-2-manual-injection%2F&amp;#38;linkname=Bringing%20Coolstore%20Microservices%20to%20the%20Service%20Mesh%3A%20Part%202%E2%80%93Manual%20Injection" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F12%2Fbringing-coolstore-microservices-to-the-service-mesh-part-2-manual-injection%2F&amp;#38;linkname=Bringing%20Coolstore%20Microservices%20to%20the%20Service%20Mesh%3A%20Part%202%E2%80%93Manual%20Injection" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F12%2Fbringing-coolstore-microservices-to-the-service-mesh-part-2-manual-injection%2F&amp;#38;linkname=Bringing%20Coolstore%20Microservices%20to%20the%20Service%20Mesh%3A%20Part%202%E2%80%93Manual%20Injection" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F12%2Fbringing-coolstore-microservices-to-the-service-mesh-part-2-manual-injection%2F&amp;#38;linkname=Bringing%20Coolstore%20Microservices%20to%20the%20Service%20Mesh%3A%20Part%202%E2%80%93Manual%20Injection" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F12%2Fbringing-coolstore-microservices-to-the-service-mesh-part-2-manual-injection%2F&amp;#38;title=Bringing%20Coolstore%20Microservices%20to%20the%20Service%20Mesh%3A%20Part%202%E2%80%93Manual%20Injection" data-a2a-url="https://developers.redhat.com/blog/2018/04/12/bringing-coolstore-microservices-to-the-service-mesh-part-2-manual-injection/" data-a2a-title="Bringing Coolstore Microservices to the Service Mesh: Part 2–Manual Injection"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/12/bringing-coolstore-microservices-to-the-service-mesh-part-2-manual-injection/"&gt;Bringing Coolstore Microservices to the Service Mesh: Part 2&amp;#8211;Manual Injection&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/GzMzljKuuIg" height="1" width="1" alt=""/&gt;</content><summary>In the first part of this series we explored the Istio project and how Red Hat is committed to and actively involved in the project and working to integrate it into Kubernetes and OpenShift to bring the benefits of a service mesh to our customers and the wider communities involved. If you want to play with Istio, check out the service mesh tutorials on learn.openshift.com. If you want to install i...</summary><dc:creator>James Falkner</dc:creator><dc:date>2018-04-12T16:12:15Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/04/12/bringing-coolstore-microservices-to-the-service-mesh-part-2-manual-injection/</feedburner:origLink></entry><entry><title>An API Journey: From Idea to Deployment the Agile Way–Part I</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/FJct-BVpn54/" /><category term="3scale" scheme="searchisko:content:tags" /><category term="API" scheme="searchisko:content:tags" /><category term="ci/cd" scheme="searchisko:content:tags" /><category term="design" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="mock" scheme="searchisko:content:tags" /><category term="Modern App Dev" scheme="searchisko:content:tags" /><category term="OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="testing" scheme="searchisko:content:tags" /><author><name>unknown</name></author><id>searchisko:content:id:jbossorg_blog-an_api_journey_from_idea_to_deployment_the_agile_way_part_i0</id><updated>2018-04-11T18:35:09Z</updated><published>2018-04-11T18:35:09Z</published><content type="html">&lt;p&gt;&lt;span style="font-weight: 400;"&gt;The goal of this series of posts is to describe a proposed approach for an &lt;strong&gt;agile API delivery process&lt;/strong&gt;. It will cover not only the development part but also the design, the tests, the delivery, and the management in production. You will learn how to use mocking to speed up development and break dependencies, use the contract-first approach for defining tests that will harden your implementation, protect the exposed API through a management gateway and, finally, secure deliveries using a CI/CD pipeline.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;I coauthored this series with Nicolas Massé, who is also a Red Hatter. This series is based on our own real-life experience from our work with the Red Hat customers we’ve met, as well as from my previous position as SOA architect at a large insurance company. This series is a translation of a typical use case we run during workshops or events such as APIdays.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Background&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;As IT becomes a core competency for enterprises in order to keep a fast pace of innovation, most companies are now turning into software companies. And they are in the process of rethinking the way they are building and running IT to prepare for the explosion of new digital services to come. This trend leads to modern software architecture paradigms such as APIs and microservices.&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Because API management solutions are becoming mainstream, it has gotten easier to securely expose APIs to the world. However, doing this isn&amp;#8217;t a complete solution. The whole API lifecycle should go agile too in order to stay relevant. Paradoxically, this difficult to do because new a service-based architecture makes dependencies skyrocket.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Thus, &lt;strong&gt;it’s time to think of a new way to deliver APIs—mocking and testing included—to simplify and accelerate the shipping&lt;/strong&gt; of production-ready APIs backed by microservices. &lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Concrete Use Case&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Before we dig in, let’s examine a use case that will help illustrate this approach through an example: the use case of ACME Inc., a local brewery. ACME produces, stores, and distributes beers to its beloved customers, and the whole process is managed in-house.&lt;/span&gt;&lt;/p&gt; &lt;figure id="attachment_477727" style="max-width: 1024px" class="wp-caption aligncenter"&gt;&lt;img class="wp-image-477727 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/acme-inc-situation-1024x475.png" alt="Acme Inc. situation" width="1024" height="475" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/acme-inc-situation-1024x475.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/acme-inc-situation-300x139.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/acme-inc-situation-768x356.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /&gt;&lt;figcaption class="wp-caption-text"&gt;(Creative Commons licensed icons by Laymik from Noun Project)&lt;/figcaption&gt;&lt;/figure&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The increasing competition and the growing demand of the customer base are forcing ACME to rethink its distribution model. Namely, the distribution will be left to independent resellers that could sell beers locally, online or on-site. The main challenge is how to open up the information system so that independent resellers can discover the beer catalog, check inventory, and so on. This can be done through the exposition of an API, of course.&lt;/span&gt;&lt;/p&gt; &lt;address&gt; &lt;figure id="attachment_477737" style="max-width: 1024px" class="wp-caption aligncenter"&gt;&lt;img class="wp-image-477737 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/acme-inc-target-1024x468.png" alt="Acme Inc. target" width="1024" height="468" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/acme-inc-target-1024x468.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/acme-inc-target-300x137.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/acme-inc-target-768x351.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /&gt;&lt;figcaption class="wp-caption-text"&gt;(Creative Commons licensed icons by Laymik from Noun Project)&lt;/figcaption&gt;&lt;/figure&gt; &lt;/address&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Technologies and Material&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The technologies we’ll use to help guide ACME Inc. on this journey &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;are:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;API design tool (&lt;/span&gt;&lt;a href="http://www.apicur.io/"&gt;&lt;span style="font-weight: 400;"&gt;Apicurio Studio&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;)&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Mocking and testing tool (&lt;/span&gt;&lt;a href="http://microcks.github.io/"&gt;&lt;span style="font-weight: 400;"&gt;Microcks&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;)&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;API testing and editing tool (&lt;/span&gt;&lt;a href="https://www.getpostman.com/"&gt;&lt;span style="font-weight: 400;"&gt;Postman&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;)&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Service development framework (&lt;/span&gt;&lt;a href="https://projects.spring.io/spring-boot/"&gt;&lt;span style="font-weight: 400;"&gt;Spring Boot&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;)&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Deployment/CI-CD platform (&lt;/span&gt;&lt;a href="https://kubernetes.io/"&gt;&lt;span style="font-weight: 400;"&gt;Kubernetes&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;/&lt;/span&gt;&lt;a href="https://www.openshift.com/"&gt;&lt;span style="font-weight: 400;"&gt;OpenShift&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;)&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;API management tool (&lt;/span&gt;&lt;a href="https://www.3scale.net/"&gt;&lt;span style="font-weight: 400;"&gt;3scale&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;)&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;You might want just read this series, but if you want to go further by replaying the whole use-case demonstration, all the material for that (source code, scripts, setup procedures) can be found in this GitHub repository: &lt;/span&gt;&lt;a href="https://github.com/microcks/api-lifecycle/tree/master/beer-catalog-demo"&gt;&lt;span style="font-weight: 400;"&gt;https://github.com/microcks/api-lifecycle/tree/master/beer-catalog-demo&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Milestone 0: API Ideation&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Although most API lifecycle definitions start with the design phase and best practices promote a contract-first approach, we all know that it is really hard to start from scratch with API contract design. It’s usually helpful to have a sandbox to test what future APIs should look like. A sandbox allows us to play and illustrate API methods and resources. It should us allow to rapidly test and share different designs for an API.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class="aligncenter wp-image-477337 size-medium" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-ideation-300x166.png" alt="API ideation stage" width="300" height="166" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-ideation-300x166.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-ideation-768x426.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-ideation-1024x567.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-ideation.png 1238w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;We can see different approaches regarding tooling for this phase.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The “local” approach consists of using a local tool that is dedicated to simulation. Some tools such as &lt;/span&gt;&lt;a href="https://hoverfly.io/"&gt;&lt;span style="font-weight: 400;"&gt;Hoverfly&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; shine at this, because they are able to use local JSON file definitions to simulate an API. However, these tools are mostly targeting developers and their “local” nature make it hard to easily share and tests multiple designs in the mid- or long-term.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;We prefer a “team” approach that we think makes more sense in an enterprise context. A ready-to-use platform can allow us to host and share different tests. This is one of the purposes of &lt;/span&gt;&lt;a href="http://microcks.github.io/"&gt;&lt;span style="font-weight: 400;"&gt;Microcks&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;, a communication and runtime tool for mocking and testing. Microcks can be easily set up on Kubernetes or OpenShift and provides a “back end as a service” feature called &lt;em&gt;dynamic service&lt;/em&gt;.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Just give it the name and the version of your API, and it generates a basic CRUD REST API for you. For our ACME use case, we will create the &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;code&gt;Beer Catalog API&lt;/code&gt;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; on version &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;code&gt;0.1&lt;/code&gt;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; to allow us to play with &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;beer&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; resources.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class="aligncenter wp-image-477617 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/microcks-generic-service-creation-1024x797.png" alt="Microcks generic service creation" width="640" height="498" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/microcks-generic-service-creation-1024x797.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/microcks-generic-service-creation-300x233.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/microcks-generic-service-creation-768x598.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/microcks-generic-service-creation.png 1308w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Dynamic endpoints for your new API are instantly made available for you. The details page for your dynamic service gives you information about the operations made available as well as the endpoint URL.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class="aligncenter wp-image-477627 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/microcks-generic-service-vizualisation-1024x752.png" alt="Microcks generic API visualization" width="1024" height="752" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/microcks-generic-service-vizualisation-1024x752.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/microcks-generic-service-vizualisation-300x220.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/microcks-generic-service-vizualisation-768x564.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;You’re now able to start using this sample API and recording new &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;beer&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; resources within the sandbox by appending the Mock URL to the Microcks base URL :&lt;/span&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ curl -X POST 'http://microcks.example.com/dynarest/Beer%20Catalog%20API/0.1/beer' -H 'Content-type: application/json' -d '{"name": "Rodenbach", "country": "Belgium", "type": "Brown ale", "rating": 4.2}' $ curl -X POST 'http://microcks.example.com/dynarest/Beer%20Catalog%20API/0.1/beer' -H 'Content-type: application/json' -d '{"name": "Westmalle Triple", "country": "Belgium", "type": "Trappist", "rating": 3.8}' $ curl -X POST 'http://microcks.example.com/dynarest/Beer%20Catalog%20API/0.1/beer' -H 'Content-type: application/json' -d '{"name": "Weissbier", "country": "Germany", "type": "Wheat", "rating": 4.1}'&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;You can check the created resources from the details page. Now everyone who has access to Microcks is also able to review your sample API and the recorded resources.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class="aligncenter wp-image-477637 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/microcks-generic-api-resources-1024x777.png" alt="Microcks generic API resources" width="1024" height="777" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/microcks-generic-api-resources-1024x777.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/microcks-generic-api-resources-300x228.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/microcks-generic-api-resources-768x582.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;You’re also able to query resources using different methods. &lt;/span&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ curl 'http://microcks.example.com/dynarest/Beer%20Catalog%20API/0.1/beer/' [{ "name" : "Rodenbach", "country" : "Belgium", "type" : "Brown ale", "rating" : 4.2, "id" : "5aa14cef6ba84900019abe9d" }, { "name" : "Westmalle Triple", "country" : "Belgium", "type" : "Trappist", "rating" : 3.8, "id" : "5aa14cf66ba84900019abe9f" }, { "name" : "Weissbier", "country" : "Germany", "type" : "Wheat", "rating" : 4.1, "id" : "5aa14cfc6ba84900019abea0" }] $ curl 'http://microcks.example.com/dynarest/Beer%20Catalog%20API/0.1/beer/5aa14cfc6ba84900019abea0' { "name" : "Weissbier", "country" : "Germany", "type" : "Wheat", "rating" : 4.1, "id" : "5aa14cfc6ba84900019abea0" } $ curl 'http://microcks.example.com/dynarest/Beer%20Catalog%20API/0.1/beer' -H 'Content-type: application/json' -d '{"country": "Belgium"}' [{ "name" : "Rodenbach", "country" : "Belgium", "type" : "Brown ale", "rating" : 4.2, "id" : "5aa14cef6ba84900019abe9d" }, { "name" : "Westmalle Triple", "country" : "Belgium", "type" : "Trappist", "rating" : 3.8, "id" : "5aa14cf66ba84900019abe9f" }]&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Microcks provides you with a complete sandbox for iterating, testing different resources representations, sharing them and—most importantly—allowing their integration with some consumer apps for real-life tests. The sandbox gives also helpful samples of resources for the following design phase.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Milestone 1: API Contract Design&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The purpose of this phase is to create an API contract artifact covering the technical and syntactic definition of the future API. A contract provides a clear description of the API methods and custom resources manipulated. It represents the cornerstone of a service-based architecture, and we’ll see later in this series how it can be help speed up things and assess future implementations.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Different attempts at standardization the last few years have finally made OpenAPI Specification (formerly the Swagger Specification) emerge as the standard to use. It promotes YAML and JSON as the de facto languages for specifying a contract.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class="aligncenter wp-image-477647 size-medium" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-design-300x166.png" alt="API design stage" width="300" height="166" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-design-300x166.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-design-768x425.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-design-1024x567.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-design.png 1260w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Here again, you can choose different paths regarding tooling. We still prefer the “team” approach that enables collaborative practices when designing an API contract. Moreover, we’ve found that a team approach helps with building a repository of the dozens of API contracts an enterprise may govern.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="http://www.apicur.io/"&gt;&lt;span style="font-weight: 400;"&gt;Apicurio Studio&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; provides an online collaborative editor for API contracts. It’s a WYSIWYG editor that simplifies API design by providing immediate feedback on compliance with the OpenAPI Specification.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class="aligncenter wp-image-477697 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/apicurio-dashboard-1024x583.png" alt="APIcurio dashboard" width="1024" height="583" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/apicurio-dashboard-1024x583.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/apicurio-dashboard-300x171.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/apicurio-dashboard-768x437.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Apicurio Studio provides a dashboard and facilities for browsing your APIs through tags, importing, or creating brand new API definitions. For our ACME use case, we will create a new &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;code&gt;Beer Catalog API&lt;/code&gt;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; with a version &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;code&gt;0.9&lt;/code&gt;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;. Thanks to our previous sandbox tests, ACME was able to precisely define its needs and requires only API methods for browsing the beer catalog.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class="aligncenter wp-image-477707 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/apicurio-api-details-1024x582.png" alt="APIcurio API details" width="1024" height="582" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/apicurio-api-details-1024x582.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/apicurio-api-details-300x171.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/apicurio-api-details-768x437.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;ACME has also been able to detail the definition of the &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;code&gt;beer&lt;/code&gt;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; resource: identifying the mandatory and the optional attributes of the data model.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;&lt;img class="aligncenter wp-image-477717 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/apicurio-beer-resource-1024x583.png" alt="APIcurio beer resource" width="1024" height="583" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/apicurio-beer-resource-1024x583.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/apicurio-beer-resource-300x171.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/apicurio-beer-resource-768x437.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;All these edit operations are made easily with validation on the fly. Then everything can be saved and versioned into a Git repository. If you want to have a look at the final result, check our copy: &lt;/span&gt;&lt;a href="https://github.com/microcks/api-lifecycle/blob/master/beer-catalog-demo/api-contracts/beer-catalog-api-swagger.json"&gt;&lt;span style="font-weight: 400;"&gt;https://github.com/microcks/api-lifecycle/blob/master/beer-catalog-demo/api-contracts/beer-catalog-api-swagger.json&lt;/span&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Milestone 2  Expectations and Request/Response Samples&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;This stage is usually neglected or ignored when building service-based architecture applications. One mistake people usually make is starting right away with the implementation without taking the small amount of time needed for this step. However—and this was introduced in &lt;/span&gt;&lt;a href="https://blog.openshift.com/mocking-microservices-made-easy-microcks/"&gt;&lt;span style="font-weight: 400;"&gt;another blog post&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;—service contractualization sampling is a strategic step because it allows you to parallelize the development of both the provider and consumers of services and it enables efficient contract testing of your API.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class="aligncenter wp-image-477757 size-medium" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-sampling-300x174.png" alt="API sampling stage" width="300" height="174" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-sampling-300x174.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-sampling-768x446.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-sampling-1024x594.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/api-sampling.png 1244w" sizes="(max-width: 300px) 100vw, 300px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;While it’s technically feasible to mock from a contract, we think it’s better to use representative samples to get the most of the business logic. Request/response samples expertly illustrate common and edge cases of the future API. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;This stage should also be dedicated to the explicitly defining business expectations that cannot be described using only a technical contract. We can easily use sampling to set up explicit assertions about what response is expected for an incoming request.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;The typical illustration of such a rule is that of the filtered query. Imagine you are offering an API that enables searching items using filters; all the response items should have their values specified as criteria. This may sound obvious but in reality, implementations may easily fail to fulfill this expectation. Another typical use case in financial services is the requirement of a minimum age for subscribing to or purchasing a product. Using sampling and expectations, it is really easy to describe that use case and the message that should appear if the minimum age is not met.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;A simple and efficient tool for doing that is &lt;/span&gt;&lt;a href="https://www.getpostman.com/"&gt;&lt;span style="font-weight: 400;"&gt;Postman&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt;. This is because we’re dealing with a modern REST API, but the same principle would apply with legacy SOAP web services by using &lt;/span&gt;&lt;a href="https://www.soapui.org/"&gt;&lt;span style="font-weight: 400;"&gt;SoapUI&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; tooling. Using Postman, we’ll be able to describe real-world requests and responses and then save anything as a JSON file called a &lt;em&gt;collection&lt;/em&gt;. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;For our ACME use case, for example, we first import the OpenAPI Specification we previously created with Apicurio. Then, it is really easy to add some examples for specifying what a response to a “&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;code&gt;Get beers having the available status&lt;/code&gt;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt;” request should look like.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class="aligncenter wp-image-477767 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/postman-samples-1024x771.png" alt="Postman samples" width="640" height="482" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/postman-samples-1024x771.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/postman-samples-300x226.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/postman-samples-768x578.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;We can also specify expectations with Postman using its tests. Tests are not defined specifically for a sample but globally at the method level. Thus, it condenses all the common, edge, and exception cases of a method. Tests are specified using JavaScript snippets.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;In our ACME example, we want to check the filtered query case we described above. This can be done easily by defining a new inline schema definition that restricts the value of the &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;&lt;code&gt;status&lt;/code&gt;&lt;/span&gt;&lt;span style="font-weight: 400;"&gt; attribute to the value that is expected.&lt;/span&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;var expectedStatus = globals["status"]; var jsonData = JSON.parse(responseBody); var schema = { "type": "array", "items": { "type": "object", "properties": { "name": { "type": "string" }, "country": { "type": "string" }, "type": { "type": "string" }, "rating": { "type": "number" }, "status": { "type": "string", "enum": [expectedStatus] } } } }; tests["Valid status in response"] = tv4.validate(jsonData, schema); &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;All this information is saved within the collection, which can be later exported and versioned in Git. It’s definitely a good practice to version everything. It also helps other people to contribute sample data and expectations in a &lt;/span&gt;&lt;a href="https://martinfowler.com/articles/consumerDrivenContracts.html"&gt;&lt;span style="font-weight: 400;"&gt;consumer-driven contract&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; way.&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;&lt;span style="font-weight: 400;"&gt;Key Takeaways&lt;/span&gt;&lt;/h2&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;So far, we have seen how ACME has started its API journey through the first three stages:&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Ideation to mature their needs using a sandbox.&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Contract design to specify the methods, documentation, and data structures of the API.&lt;/span&gt;&lt;/li&gt; &lt;li style="font-weight: 400;"&gt;&lt;span style="font-weight: 400;"&gt;Sampling as an extra step allowing the communication of real-life samples and expectations. We&amp;#8217;ll see that it is also an enabler for parallelized development and automated testing.&lt;/span&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Stay tuned for part II in which you will learn how to deploy a mock from the defined examples and much more.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F11%2Fapi-journey-idea-deployment-agile-part1%2F&amp;#38;linkname=An%20API%20Journey%3A%20From%20Idea%20to%20Deployment%20the%20Agile%20Way%E2%80%93Part%20I" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F11%2Fapi-journey-idea-deployment-agile-part1%2F&amp;#38;linkname=An%20API%20Journey%3A%20From%20Idea%20to%20Deployment%20the%20Agile%20Way%E2%80%93Part%20I" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F11%2Fapi-journey-idea-deployment-agile-part1%2F&amp;#38;linkname=An%20API%20Journey%3A%20From%20Idea%20to%20Deployment%20the%20Agile%20Way%E2%80%93Part%20I" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F11%2Fapi-journey-idea-deployment-agile-part1%2F&amp;#38;linkname=An%20API%20Journey%3A%20From%20Idea%20to%20Deployment%20the%20Agile%20Way%E2%80%93Part%20I" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F11%2Fapi-journey-idea-deployment-agile-part1%2F&amp;#38;linkname=An%20API%20Journey%3A%20From%20Idea%20to%20Deployment%20the%20Agile%20Way%E2%80%93Part%20I" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F11%2Fapi-journey-idea-deployment-agile-part1%2F&amp;#38;linkname=An%20API%20Journey%3A%20From%20Idea%20to%20Deployment%20the%20Agile%20Way%E2%80%93Part%20I" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F11%2Fapi-journey-idea-deployment-agile-part1%2F&amp;#38;linkname=An%20API%20Journey%3A%20From%20Idea%20to%20Deployment%20the%20Agile%20Way%E2%80%93Part%20I" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F11%2Fapi-journey-idea-deployment-agile-part1%2F&amp;#38;linkname=An%20API%20Journey%3A%20From%20Idea%20to%20Deployment%20the%20Agile%20Way%E2%80%93Part%20I" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F11%2Fapi-journey-idea-deployment-agile-part1%2F&amp;#38;title=An%20API%20Journey%3A%20From%20Idea%20to%20Deployment%20the%20Agile%20Way%E2%80%93Part%20I" data-a2a-url="https://developers.redhat.com/blog/2018/04/11/api-journey-idea-deployment-agile-part1/" data-a2a-title="An API Journey: From Idea to Deployment the Agile Way–Part I"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/11/api-journey-idea-deployment-agile-part1/"&gt;An API Journey: From Idea to Deployment the Agile Way&amp;#8211;Part I&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/FJct-BVpn54" height="1" width="1" alt=""/&gt;</content><summary>The goal of this series of posts is to describe a proposed approach for an agile API delivery process. It will cover not only the development part but also the design, the tests, the delivery, and the management in production. You will learn how to use mocking to speed up development and break dependencies, use the contract-first approach for defining tests that will harden your implementation, pr...</summary><dc:creator>unknown</dc:creator><dc:date>2018-04-11T18:35:09Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/04/11/api-journey-idea-deployment-agile-part1/</feedburner:origLink></entry><entry><title>Red Hat Summit 2018: Getting Started with Modern Application Development</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/kvUkV0iz6GQ/" /><category term="cloud native development" scheme="searchisko:content:tags" /><category term="Developer Events" scheme="searchisko:content:tags" /><category term="events" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="microservice" scheme="searchisko:content:tags" /><category term="reactive programming" scheme="searchisko:content:tags" /><category term="red hat summit" scheme="searchisko:content:tags" /><category term="Red Hat Summit 2018" scheme="searchisko:content:tags" /><author><name>Mike Guerette</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_summit_2018_getting_started_with_modern_application_development</id><updated>2018-04-11T10:55:21Z</updated><published>2018-04-11T10:55:21Z</published><content type="html">&lt;p&gt;Are you interested in writing cloud-native applications?  Want to learn about building reactive microservices? Would you like to find out how to quickly get started with Vert.x, Wildfly Swarm, or Node.js in the cloud with Red Hat OpenShift Application Runtimes? Are you an Enterprise Java developer looking to try new programming paradigms?&lt;/p&gt; &lt;p&gt;&lt;strong&gt;To learn about modern application development, join us at &lt;a href="https://www.redhat.com/en/summit/2018"&gt;Red Hat Summit 2018&lt;/a&gt;&lt;/strong&gt; for sessions such as:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=153550"&gt;&lt;span style="font-weight: 400;"&gt;Getting started with cloud-native apps&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=157103"&gt;Improve developer productivity with Red Hat OpenShift Application Runtimes&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154247"&gt;&lt;span style="font-weight: 400;"&gt;5 minutes to enterprise Node.js on Red Hat OpenShift with Red Hat OpenShift Application Runtimes &lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154522"&gt;&lt;span style="font-weight: 400;"&gt;Be reactive with Red Hat OpenShift Application Runtimes&lt;/span&gt;&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154486"&gt;Reactive data pipelines on OpenShift with Eclipse Vert.x&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;span style="font-weight: 400;"&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154270"&gt;Eclipse MicroProfile with WildFly Swarm&lt;/a&gt; &lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154710"&gt;Low-risk mono to microservices: Istio, Teiid, and Spring Boot&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154237"&gt;5 ways Red Hat OpenShift enhances application development&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154399"&gt;Upgrade your developer powers with Kubernetes and OpenShift&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;h2&gt;Session Highlights&lt;/h2&gt; &lt;p&gt;&lt;span id="more-484137"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;&lt;strong&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=157103"&gt;Improve developer productivity with Red Hat OpenShift Application Runtimes&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Speaker:&lt;/strong&gt; &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_0" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=367172"&gt;John Clingan&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt;&lt;/p&gt; &lt;p class="profileBiography"&gt;Developers are being asked to learn a lot in a short period of time. They are moving from monolithic architectures to microservices, from application servers to container platforms, from one application runtime to another, and from an agile methodology to DevOps. This can introduce a lot of complexity.&lt;/p&gt; &lt;p class="profileBiography"&gt;Red Hat OpenShift Application Runtimes combines WildFly Swarm, Spring Boot, Eclipse Vert.x, and Node.js into a single product that makes developing with these runtimes a natural experience on OpenShift.&lt;/p&gt; &lt;p class="profileBiography"&gt;In this session, we&amp;#8217;ll show you how developers can become rapidly productive by following a prescriptive path provided by Red Hat OpenShift Application Runtimes.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;strong&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=153550"&gt;Getting started with cloud-native apps&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Speakers:  &lt;/strong&gt;&lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_0" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=365685"&gt;Siamak Sadeghianfar&lt;/a&gt;, &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_1" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=365688"&gt;James Falkner&lt;/a&gt; , &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_2" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=365699"&gt;Thomas Qvarnström&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt;&lt;/p&gt; &lt;div id="MainContent_HubbSessionDetail_sessionBiography" class="section"&gt; &lt;p class="profileBiography"&gt;This hands-on lab on cloud-native apps will introduce the key concepts of modern application development using microservices runtimes and frameworks. In this lab, you&amp;#8217;ll learn how to use the microservices runtimes included in Red Hat OpenShift Application Runtimes—such as Spring Boot, WildFly Swarm, and Vert.x—to build a cloud-native application. We&amp;#8217;ll also share how to automate build, configuration management, and deployment of your cloud-native apps using the application life-cycle management capabilities of Red Hat OpenShift.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;/div&gt; &lt;hr /&gt; &lt;h3&gt;&lt;strong&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154247"&gt;5 minutes to enterprise Node.js on Red Hat OpenShift with Red Hat OpenShift Application Runtimes&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Speakers: &lt;/strong&gt;&lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_0" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366308"&gt;Jay Balunas&lt;/a&gt;, &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_1" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366448"&gt;Lance Ball&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt;&lt;/p&gt; &lt;p class="profileBiography"&gt;JavaScript has always played an important role in the browser, and now its use in enterprise server-side development has exploded with Node.js. Its reactive architecture and lightweight design makes it an ideal technology for the containerized microservices architectures you’ve been hearing so much about.&lt;/p&gt; &lt;p class="profileBiography"&gt;What does this mean for your enterprise? Where does it fit, and how can Red Hat OpenShift Application Runtimes help you benefit from this technology while still using a Platform-as-a-Service model?&lt;/p&gt; &lt;p class="profileBiography"&gt;We’ll answer these questions and more as we demonstrate how quickly you can setup a non-trivial, enterprise-grade Node.js application on Red Hat OpenShift. We’ll explore how to integrate with other open source technologies, such as Istio, and discuss strategies for your Node.js development and deployment pipleline, including canary and blue/green deployment strategies.&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;strong&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154522"&gt;Be reactive with Red Hat OpenShift Application Runtimes&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Speakers:&lt;/strong&gt; &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_0" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366003"&gt;Jeremy Davis&lt;/a&gt;, &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_1" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366703"&gt;Rodney Russ&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This session presents how to develop reactive microservices on Red Hat OpenShift. The reactive movement proposes a way to build distributed systems, infusing asynchrony at the heart of the application. Reactive microservices are more responsive, robust, and interactive. They efficiently use the CPU and memory, making them perfectly suited for the cloud and containers.&lt;/p&gt; &lt;p&gt;However, becoming reactive is challenging. How do you exchange messages, handle concurrent requests asynchronously, process streams, and develop asynchronous code?&lt;/p&gt; &lt;p&gt;The reactive facet of Red Hat OpenShift Application Runtimes offers everything you need to build such a system. Based on Eclipse Vert.x—a toolkit to build reactive distributed systems, it enables the development of reactive microservices on top of OpenShift. Vert.x combines an asynchronous execution model, reactive eXtensions, and a thrilling ecosystem. It’s also incredibly flexible—whether it&amp;#8217;s an API gateway, sophisticated web applications, or a high-volume event processing, Vert.x is a great fit.&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;strong&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154486"&gt;Reactive data pipelines on OpenShift with Eclipse Vert.x&lt;/a&gt;&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Speakers:&lt;/strong&gt; &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_0" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366224"&gt;Clement Escoffier&lt;/a&gt;, &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_1" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366598"&gt;Marius Bogoevici&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt;&lt;/p&gt; &lt;div id="MainContent_HubbSessionDetail_sessionBiography" class="section"&gt; &lt;p class="profileBiography"&gt;Modern applications are data intensive and deal with large volumes of data from a variety of heterogeneous sources. Use cases are becoming more complex as well—for example, combining IoT, analytics, and traditional enterprise applications in a unified data pipeline. In this scenario, data is flowing continuously. How do you handle this data? How do you deal with a large number of concurrent clients sending data continuously to your application? How can you manage heterogeneous, ever-changing data?&lt;/p&gt; &lt;p class="profileBiography"&gt;In this session, we&amp;#8217;ll share how reactive data pipelines provide a resilient and elastic backbone to face the data flow and get the job done. We&amp;#8217;ll present how applying reactive principles to data pipelines provides a flexible, responsive way to integrate data ingestion and processing scenarios in a microservices-based architecture. This solution integrates Red Hat OpenShift Application Runtimes—specifically its reactive facet, Vert.x—Red Hat AMQ, and Apache Kafka.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;h3&gt;&lt;strong&gt;&lt;a href="https://agenda.summit.redhat.com/SessionDetail.aspx?id=154270"&gt;Eclipse MicroProfile with WildFly Swarm&lt;/a&gt; &lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Speakers:&lt;/strong&gt; &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_0" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366285"&gt;Ken Finnigan&lt;/a&gt;, &lt;a id="MainContent_HubbSessionDetail_sessionSpeakersListView_A1_1" href="https://agenda.summit.redhat.com/SpeakerDetail.aspx?id=366308"&gt;Jay Balunas&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Abstract:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;What if there was a way you could take advantage of the latest microservices architectures by using many of the developers and skills you already have? In this session, we’ll show you how with Eclipse MicroProfile and Red Hat’s implementation, WildFly Swarm. We will discuss all the cool features it allows you to easily use, such as fault tolerance and metrics, and we will explain current roadmap plans.&lt;/p&gt; &lt;p&gt;We will also include a demo that showcases what’s possible with Eclipse MicroProfile, utilizing the existing specifications and built with WildFly Swarm as the implementation. We will develop a simple microservice that integrates metrics, health checks, configuration, fault tolerance, open API, tracing, and type-safe REST clients. By the end of the session, attendees will have a better understanding of Eclipse MicroProfile and how to develop to it with WildFly Swarm.&lt;/p&gt; &lt;p&gt;&amp;#160;&lt;/p&gt; &lt;hr /&gt; &lt;hr /&gt; &lt;h2&gt;Don&amp;#8217;t miss Red Hat Summit 2018&lt;/h2&gt; &lt;p&gt;&lt;a href="https://www.redhat.com/en/summit/2018"&gt;&lt;strong&gt;Red Hat Summit 2018&lt;/strong&gt;&lt;/a&gt; is May 8th &amp;#8211; 10th in San Francisco, CA at the Moscone Center.  Register early to save on a full conference pass.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/"&gt;List of all sessions&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/?Application%20development=2"&gt;All Application development sessions&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/?Cloud-native%20application%20development=4"&gt;Cloud-native application development sessions&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/?Red+Hat+OpenShift+Application+Runtimes=9"&gt;Sessions on Red Hat OpenShift Application Runtimes&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://agenda.summit.redhat.com/?OpenShift.io=9"&gt;Sessions on Red Hat OpenShift.io&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F11%2Fred-hat-summit-2018-getting-started-with-modern-application-development%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Getting%20Started%20with%20Modern%20Application%20Development" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F11%2Fred-hat-summit-2018-getting-started-with-modern-application-development%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Getting%20Started%20with%20Modern%20Application%20Development" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F11%2Fred-hat-summit-2018-getting-started-with-modern-application-development%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Getting%20Started%20with%20Modern%20Application%20Development" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F11%2Fred-hat-summit-2018-getting-started-with-modern-application-development%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Getting%20Started%20with%20Modern%20Application%20Development" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F11%2Fred-hat-summit-2018-getting-started-with-modern-application-development%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Getting%20Started%20with%20Modern%20Application%20Development" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F11%2Fred-hat-summit-2018-getting-started-with-modern-application-development%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Getting%20Started%20with%20Modern%20Application%20Development" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F11%2Fred-hat-summit-2018-getting-started-with-modern-application-development%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Getting%20Started%20with%20Modern%20Application%20Development" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F11%2Fred-hat-summit-2018-getting-started-with-modern-application-development%2F&amp;#38;linkname=Red%20Hat%20Summit%202018%3A%20Getting%20Started%20with%20Modern%20Application%20Development" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F11%2Fred-hat-summit-2018-getting-started-with-modern-application-development%2F&amp;#38;title=Red%20Hat%20Summit%202018%3A%20Getting%20Started%20with%20Modern%20Application%20Development" data-a2a-url="https://developers.redhat.com/blog/2018/04/11/red-hat-summit-2018-getting-started-with-modern-application-development/" data-a2a-title="Red Hat Summit 2018: Getting Started with Modern Application Development"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/11/red-hat-summit-2018-getting-started-with-modern-application-development/"&gt;Red Hat Summit 2018: Getting Started with Modern Application Development&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/kvUkV0iz6GQ" height="1" width="1" alt=""/&gt;</content><summary>Are you interested in writing cloud-native applications?  Want to learn about building reactive microservices? Would you like to find out how to quickly get started with Vert.x, Wildfly Swarm, or Node.js in the cloud with Red Hat OpenShift Application Runtimes? Are you an Enterprise Java developer looking to try new programming paradigms? To learn about modern application development, join us at R...</summary><dc:creator>Mike Guerette</dc:creator><dc:date>2018-04-11T10:55:21Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/04/11/red-hat-summit-2018-getting-started-with-modern-application-development/</feedburner:origLink></entry><entry><title>Istio Chaos Engineering: I Meant To Do That</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ecZh9Z1LYsQ/" /><category term="cloud" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="istio" scheme="searchisko:content:tags" /><category term="OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><category term="testing" scheme="searchisko:content:tags" /><author><name>unknown</name></author><id>searchisko:content:id:jbossorg_blog-istio_chaos_engineering_i_meant_to_do_that</id><updated>2018-04-10T10:55:46Z</updated><published>2018-04-10T10:55:46Z</published><content type="html">&lt;p&gt;If you break things before they break, it&amp;#8217;ll give you a break and they won&amp;#8217;t break.&lt;/p&gt; &lt;p&gt;(Clearly, this is management-level material)&lt;/p&gt; &lt;p&gt;&lt;span id="more-477097"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;[This is part six of a ten-week blog series about &lt;a href="https://istio.io/docs/concepts/what-is-istio/overview.html"&gt;Istio&lt;/a&gt;. Part five can be found &lt;a href="https://developers.redhat.com/blog/2018/04/03/istio-tracing-monitoring/"&gt;here&lt;/a&gt;.]&lt;/p&gt; &lt;p&gt;Testing software isn&amp;#8217;t just challenging, it&amp;#8217;s important. Testing for correctness is one thing (e.g. &amp;#8220;does this function return the correct result?&amp;#8221;), but testing for failures in network reliability (the very first of &lt;a href="https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing"&gt;the eight fallacies of distributed computing&lt;/a&gt;) is quite another task. One of the challenges is to be able to mimic or inject faults into the system. Doing it in your source code means changing the very code you&amp;#8217;re testing, which is impossible. You can&amp;#8217;t test the code without the faults added, but the code you want to test doesn&amp;#8217;t have the faults added. Thus the deadly embrace of fault injection and the introduction of &lt;a href="https://en.wikipedia.org/wiki/Heisenbug"&gt;Heisenbugs&lt;/a&gt; &amp;#8212; defects that disappear when you attempt to observe them.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s see how Istio makes this oh so easy.&lt;/p&gt; &lt;h2&gt;We&amp;#8217;re All Fine Here Now, Thank You &amp;#8230; How Are You?&lt;/h2&gt; &lt;p&gt;Here&amp;#8217;s a scenario: Two pods are running our &amp;#8220;recommendation&amp;#8221; microservice (from our &lt;a href="http://bit.ly/istio-tutorial"&gt;Istio Tutorial&lt;/a&gt;), one labeled &amp;#8220;v1&amp;#8221;, the other labeled &amp;#8220;v2&amp;#8221;. As you can see, everything is working just fine:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-large wp-image-477907 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/chaos_50_50_split-1024x799.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/chaos_50_50_split-1024x799.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/chaos_50_50_split-1024x799.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/chaos_50_50_split-300x234.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/chaos_50_50_split-768x599.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/chaos_50_50_split.png 1472w" sizes="(max-width: 1024px) 100vw, 1024px" /&gt;&lt;/p&gt; &lt;p&gt;(By the way, the number on the right is simply a counter for each pod)&lt;/p&gt; &lt;p&gt;Everything is working swimmingly. Well&amp;#8230; We can&amp;#8217;t have that now, can we? Let&amp;#8217;s have some fun and break things &amp;#8212; &lt;em&gt;without changing any source code&lt;/em&gt;.&lt;/p&gt; &lt;h2&gt;Give Your Microservice A Break&lt;/h2&gt; &lt;p&gt;Here&amp;#8217;s the content of the yaml file we&amp;#8217;ll use to create an Istio route rule that breaks (503, server error) half the time:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-large wp-image-477807 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-03-at-3.02.06-PM.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-03-at-3.02.06-PM.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-03-at-3.02.06-PM.png 312w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-03-at-3.02.06-PM-252x300.png 252w" sizes="(max-width: 312px) 100vw, 312px" /&gt;&lt;/p&gt; &lt;p&gt;Notice that we&amp;#8217;re specifying a 503 error be returned 50 percent of the time.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s another screen capture of a &lt;code&gt;curl&lt;/code&gt; command loop running against the microservices, after we&amp;#8217;ve implemented the route rule (above) to break things. Notice that once it goes into effect, half of the requests result in 503 errors, regardless of which pod (v1 or v2) is the endpoint:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-large wp-image-477827 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-03-at-2.57.24-PM-1024x794.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-03-at-2.57.24-PM-1024x794.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-03-at-2.57.24-PM-1024x794.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-03-at-2.57.24-PM-300x233.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-03-at-2.57.24-PM-768x595.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-03-at-2.57.24-PM.png 1486w" sizes="(max-width: 1024px) 100vw, 1024px" /&gt;&lt;/p&gt; &lt;p&gt;To restore normal operation, you need to simply delete the route rule; in our case the command is &lt;code&gt;istioctl delete routerule recommendation-503 -n tutorial&lt;/code&gt;. &amp;#8220;Tutorial&amp;#8221; is the name of the Red Hat OpenShift project where this tutorial runs.&lt;/p&gt; &lt;h2&gt;Delay Tactics&lt;/h2&gt; &lt;p&gt;Generating 503 errors is helpful when testing the robustness of your system, but anticipating and handling delays is even more impressive &amp;#8212; and probably more common. A slow response from a microservice is like a poison pill that sickens the entire system. Using Istio, you can test your delay-handling code without changing any of your code. In this first example, we are exaggerating the network latency.&lt;/p&gt; &lt;p&gt;Note that, &lt;em&gt;after&lt;/em&gt; testing, you may need (or desire) to change your code, but this is you being proactive instead of &lt;em&gt;reactive&lt;/em&gt;. This is the proper code-test-feedback-code-test&amp;#8230; loop.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s a route rule that will&amp;#8230; Well, you know what? Istio is so easy to use, and the yaml file is so easy to understand, I&amp;#8217;ll let it speak for itself. I&amp;#8217;m sure you&amp;#8217;ll immediately see what it does:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-large wp-image-477887 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-03-at-3.39.29-PM.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-03-at-3.39.29-PM.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-03-at-3.39.29-PM.png 317w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-03-at-3.39.29-PM-258x300.png 258w" sizes="(max-width: 317px) 100vw, 317px" /&gt;&lt;/p&gt; &lt;p&gt;Half the time we&amp;#8217;ll see a seven-second delay. Note that this is not like a sleep command in the source code; Istio is holding the request for seven seconds before completing the round trip. Since Istio comes &lt;a href="https://developers.redhat.com/blog/2018/04/03/istio-tracing-monitoring/"&gt;with Jaeger tracing built in&lt;/a&gt;, we can see the effect in this screen capture of the Jaeger UI. Notice the long-running request toward the upper right of the chart &amp;#8212; it took 7.02 seconds:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-large wp-image-479267 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-3.55.27-PM.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-3.55.27-PM.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-3.55.27-PM.png 810w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-3.55.27-PM-300x111.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-3.55.27-PM-768x285.png 768w" sizes="(max-width: 810px) 100vw, 810px" /&gt;&lt;/p&gt; &lt;p&gt;This scenario allows you to test and code for network latencies. Of course, removing the route rule removes the delay. Again, I hate to belabor the point, but it&amp;#8217;s so important. We introduced this fault without changing our source code.&lt;/p&gt; &lt;h2&gt;Never Gonna Give You Up&lt;/h2&gt; &lt;p&gt;Another useful Istio feature related to chaos engineering is the ability to retry a service N more times. The thought is this: requesting a service may result in a 503 error, but a retry may work. Perhaps some odd edge case caused the service to fail the first time. Yes, you want to know about that and fix it. In the meantime, let&amp;#8217;s keep our system up and running.&lt;/p&gt; &lt;p&gt;So we want a service to occasionally throw a 503 error, and then have Istio retry the service. Hmmm&amp;#8230; If only there was a way to throw a 503 error without changing our code.&lt;/p&gt; &lt;p&gt;Wait. Istio can do that. We just did that several paragraphs ago.&lt;/p&gt; &lt;p&gt;Using the following file, we&amp;#8217;ll have 503 errors being thrown by our &amp;#8220;recommendation-v2&amp;#8221; service half the time:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-large wp-image-479487 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.39.51-PM.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.39.51-PM-250x300.png" alt="" width="250" height="300" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.39.51-PM-250x300.png 250w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.39.51-PM.png 616w" sizes="(max-width: 250px) 100vw, 250px" /&gt;&lt;/p&gt; &lt;p&gt;Sure enough, some requests are failing:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-large wp-image-479497 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.42.08-PM-1024x809.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.42.08-PM-1024x809.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.42.08-PM-1024x809.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.42.08-PM-300x237.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.42.08-PM-768x607.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.42.08-PM.png 1334w" sizes="(max-width: 1024px) 100vw, 1024px" /&gt;&lt;/p&gt; &lt;p&gt;Now we can introduce the Retry feature of Istio, using this nifty configuration:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-large wp-image-479507 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.43.23-PM.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.43.23-PM.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.43.23-PM.png 309w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.43.23-PM-252x300.png 252w" sizes="(max-width: 309px) 100vw, 309px" /&gt;&lt;/p&gt; &lt;p&gt;We&amp;#8217;ve configured this route rule to retry up to 2-3 times, waiting two seconds between attempts. This should reduce (or hopefully eliminate) 503 errors:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-large wp-image-479517 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.46.09-PM-1024x822.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.46.09-PM-1024x822.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.46.09-PM-1024x822.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.46.09-PM-300x241.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.46.09-PM-768x616.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.46.09-PM.png 1316w" sizes="(max-width: 1024px) 100vw, 1024px" /&gt;&lt;/p&gt; &lt;p&gt;Just to recap: We have Istio tossing 503 errors for half of the requests, and we also have Istio performing three retries after a 503 error. As a result, everything is A-OK. By not giving up, but by using the Retry, we kept our promise.&lt;/p&gt; &lt;p&gt;Did I mention we&amp;#8217;re doing all this with no changes to our source code? I may have mentioned that. Two Istio route rules were all it took:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-large wp-image-479527 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.49.09-PM.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.49.09-PM.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.49.09-PM.png 599w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-04-at-4.49.09-PM-300x47.png 300w" sizes="(max-width: 599px) 100vw, 599px" /&gt;&lt;/p&gt; &lt;h2&gt;Never Gonna Let You Down&lt;/h2&gt; &lt;p&gt;Now it&amp;#8217;s time turn around and do the opposite; we want a scenario where we&amp;#8217;re going to wait only a given time span before giving up and deserting our request attempt. In other words, we&amp;#8217;re not going to slow down everything while waiting for one slow service. Instead, we will bail out of the request and use some sort of fallback position. Don&amp;#8217;t worry dear website user&amp;#8230; We won&amp;#8217;t let you down.&lt;/p&gt; &lt;p&gt;Istio allows us to establish a Timeout limit for a request. If the service takes longer than the Timeout, a 504 (Gateway Timeout) error is returned. Again, this is all done via Istio configuration. We did however add a sleep command to our source code (and rebuilt and redeployed the code in a container) to mimic a slow service. There&amp;#8217;s not really a no-touch way around this; we need slow code.&lt;/p&gt; &lt;p&gt;After adding the three-second sleep to our recommendation (v2 image and redeploying the container), we&amp;#8217;ll add the following timeout rule via an Istio route rule:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-large wp-image-479777 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-05-at-9.44.35-AM.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-05-at-9.44.35-AM.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-05-at-9.44.35-AM.png 312w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-05-at-9.44.35-AM-270x300.png 270w" sizes="(max-width: 312px) 100vw, 312px" /&gt;&lt;/p&gt; &lt;p&gt;As you can see, we&amp;#8217;re giving the recommendation service one second before we return a 504 error. After implementing this route rule (and with the three-second sleep built into our recommendation:v2 service), here&amp;#8217;s what we get:&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-large wp-image-479827 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-05-at-10.02.35-AM-1024x812.png" src="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-05-at-10.02.35-AM-1024x812.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-05-at-10.02.35-AM-1024x812.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-05-at-10.02.35-AM-300x238.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-05-at-10.02.35-AM-768x609.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2018/04/Screen-Shot-2018-04-05-at-10.02.35-AM.png 1326w" sizes="(max-width: 1024px) 100vw, 1024px" /&gt;&lt;/p&gt; &lt;h2&gt;Where Have I Heard This Before?&lt;/h2&gt; &lt;p&gt;Repeating, ad nauseam: we are able to set this timeout function with no changes to our source code. The value here is that you can now write your code to respond to a timeout and easily test it using Istio.&lt;/p&gt; &lt;h2&gt;All Together Now&lt;/h2&gt; &lt;p&gt;Injecting chaos into your system, via Istio, is a powerful way to push your code to the limits and test your robustness. Fallbacks, bulkheads, and circuit breaker patterns are combined with Istio&amp;#8217;s fault injection, delays, retries, and timeouts to support your efforts to build fault-tolerant, cloud-native systems. Using these technologies (combined with &lt;a href="https://www.redhat.com/en/topics/containers/what-is-kubernetes"&gt;Kubernetes&lt;/a&gt; and &lt;a href="https://developers.redhat.com/products/openshift/overview/"&gt;Red Hat OpenShift&lt;/a&gt;), give you the tools needed to move into the future.&lt;/p&gt; &lt;p&gt;And to give yourself a break.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F10%2Fistio-chaos-engineering%2F&amp;#38;linkname=Istio%20Chaos%20Engineering%3A%20I%20Meant%20To%20Do%20That" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F10%2Fistio-chaos-engineering%2F&amp;#38;linkname=Istio%20Chaos%20Engineering%3A%20I%20Meant%20To%20Do%20That" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_google_plus" href="https://www.addtoany.com/add_to/google_plus?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F10%2Fistio-chaos-engineering%2F&amp;#38;linkname=Istio%20Chaos%20Engineering%3A%20I%20Meant%20To%20Do%20That" title="Google+" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F10%2Fistio-chaos-engineering%2F&amp;#38;linkname=Istio%20Chaos%20Engineering%3A%20I%20Meant%20To%20Do%20That" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F10%2Fistio-chaos-engineering%2F&amp;#38;linkname=Istio%20Chaos%20Engineering%3A%20I%20Meant%20To%20Do%20That" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F10%2Fistio-chaos-engineering%2F&amp;#38;linkname=Istio%20Chaos%20Engineering%3A%20I%20Meant%20To%20Do%20That" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F10%2Fistio-chaos-engineering%2F&amp;#38;linkname=Istio%20Chaos%20Engineering%3A%20I%20Meant%20To%20Do%20That" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F10%2Fistio-chaos-engineering%2F&amp;#38;linkname=Istio%20Chaos%20Engineering%3A%20I%20Meant%20To%20Do%20That" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2018%2F04%2F10%2Fistio-chaos-engineering%2F&amp;#38;title=Istio%20Chaos%20Engineering%3A%20I%20Meant%20To%20Do%20That" data-a2a-url="https://developers.redhat.com/blog/2018/04/10/istio-chaos-engineering/" data-a2a-title="Istio Chaos Engineering: I Meant To Do That"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2018/04/10/istio-chaos-engineering/"&gt;Istio Chaos Engineering: I Meant To Do That&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;RHD Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ecZh9Z1LYsQ" height="1" width="1" alt=""/&gt;</content><summary>If you break things before they break, it’ll give you a break and they won’t break. (Clearly, this is management-level material) [This is part six of a ten-week blog series about Istio. Part five can be found here.] Testing software isn’t just challenging, it’s important. Testing for correctness is one thing (e.g. “does this function return the correct result?”), but testing for failures in networ...</summary><dc:creator>unknown</dc:creator><dc:date>2018-04-10T10:55:46Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2018/04/10/istio-chaos-engineering/</feedburner:origLink></entry></feed>
